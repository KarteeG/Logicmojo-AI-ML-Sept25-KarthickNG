{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/KarteeG/Logicmojo-AI-ML-Sept25-KarthickNG/blob/main/Class%20FIrst\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Integer\n",
        "x = 26\n",
        "type(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EattZ_3l0mPC",
        "outputId": "19f3258e-e80b-40f1-fcd0-523f07a4213b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "int"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Float\n",
        "z = 10.5\n",
        "type(z)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sflcXRIF0l6f",
        "outputId": "493151b7-2f6d-40e6-e83e-9a37cd36450a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "float"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " z = 2j + 1\n",
        "type(z)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H1Dgbhg11DHr",
        "outputId": "522eef05-58f0-4e3d-c7ca-d4c841ed739b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "complex"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Complex Z=R+jX\n",
        "a = 2j + 1\n",
        "type(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Cq63hbWw1DCy",
        "outputId": "8dfed1e4-37bd-49e1-fcaf-3200d1948188"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "complex"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Boolean\n",
        "valid = False\n",
        "type(valid)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wiwjtTOA1Cwh",
        "outputId": "99240b38-0467-4185-e548-1dcd974361f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "bool"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Boolean\n",
        "valid = True\n",
        "type(valid)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uMq_0lok4hvg",
        "outputId": "9d120f86-f7bf-4987-9b90-9eda271cac8c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "bool"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#String (Sinlge quote or DoultCode Accepte)\n",
        "name = 'Karthick'\n",
        "nme = \"Karthick\"\n",
        "type(name)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CPcGleau4rGt",
        "outputId": "2e6112a6-0aab-48a5-817c-be8f41a02079"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#String (Sinlge quote or DoultCode Accepte)\n",
        "name = \"Karthick\"\n",
        "type(name)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_YzTd7g-4rDU",
        "outputId": "eab3d551-e94e-4c44-bd77-3cc1134df4d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#List\n",
        "L = [1,2,3,4,\"s\",4,1.5,2]\n",
        "type(L)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kX1wnnyZ4rAJ",
        "outputId": "d1f58837-c7c9-41b8-a790-76f4582f9145"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "list"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Tuple\n",
        "T = (1,2,3,4,\"s\",4,1.5,2)\n",
        "type(T)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0ArUGpNz4q2i",
        "outputId": "a01d792f-ac18-4c4d-80c5-20423331e78e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tuple"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Set\n",
        "S = {1,2,3,4,\"s\",4,1.5,2}\n",
        "type(S)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MKTDIoIn4qzT",
        "outputId": "91eb009d-310e-4fe2-8373-efbc0c036640"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "set"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "L = [1,2,3,4,\"s\",4,1.5,2]\n",
        "T = (1,2,3,4,\"s\",4,1.5,2)\n",
        "S = {1,2,3,4,\"s\",4,1.5,2}\n",
        "print(L)\n",
        "print(T)\n",
        "print(S)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XdyRHP2-4qqy",
        "outputId": "754adb8f-bb18-408b-9370-7e2f656a7dbe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 4, 's', 4, 1.5, 2]\n",
            "(1, 2, 3, 4, 's', 4, 1.5, 2)\n",
            "{1, 2, 3, 4, 1.5, 's'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#List – Mutable\n",
        "L = [1,2,3,4,\"s\",4,1.5,2]\n",
        "L.append(4)\n",
        "L[0] = 10\n",
        "T = (1,2,3,4,\"s\",4,1.5,2)\n",
        "#Set – Mutable (but no index)\n",
        "S = {1,2,3,4,\"s\",4,1.5,2}\n",
        "S.add(4)\n",
        "S.remove(2)\n",
        "print(L)\n",
        "print(T)\n",
        "print(S)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Li7A25BE0lci",
        "outputId": "097905cc-a98d-46d0-aa11-ca46c05c718f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[10, 2, 3, 4, 's', 4, 1.5, 2, 4]\n",
            "(1, 2, 3, 4, 's', 4, 1.5, 2)\n",
            "{1, 3, 4, 1.5, 's'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Tuple – Immutable\n",
        "T = (1,2,3,4,\"s\",4,1.5,2)\n",
        "#T[0] = 10\n",
        "#T.add(4)\n",
        "T.remove(2)\n",
        "print(T)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 201
        },
        "id": "gVN53wV499Oo",
        "outputId": "e1404adc-dac5-44c7-a7e4-42d18916dfe2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'tuple' object has no attribute 'remove'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1205988717.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m#T[0] = 10\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#T.add(4)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mT\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'tuple' object has no attribute 'remove'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dictionary (dict)\n",
        "d = {\"a\":\"apple\", \"b\":5}\n",
        "type(d)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mB6824HW9mvt",
        "outputId": "c15d4b51-1306-427c-e736-658ee4515d47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Bytes only quotes\n",
        "data = b'123'\n",
        "data = b\"123\"\n",
        "type(data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ofekgk2c_cos",
        "outputId": "fa8f6490-2e66-45ac-8433-1ad76696bfcb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "bytes"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data1 = b'hello'\n",
        "data2 = b\"hello\"\n",
        "\n",
        "print(data1)         # b'hello'\n",
        "print(data2)         # b'hello'\n",
        "print(type(data1))   # <class 'bytes'>\n",
        "print(type(data2))   # <class 'bytes'>"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Uz_7R1fc_ckR",
        "outputId": "89cd276a-6e88-4910-bf77-eea9931a3cb4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "b'hello'\n",
            "b'hello'\n",
            "<class 'bytes'>\n",
            "<class 'bytes'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Variable assignment\n",
        "age = 30         # 'age' is a variable storing an integer value\n",
        "name = \"Alice\"    # 'name' is a variable storing a string value\n",
        "height = 6.2     # 'height' is a variable storing a float value\n",
        "\n",
        "# Using variables\n",
        "print(name + \" is \" + str(age) + \" years old \" + \"and \" + str(height) + \" feet tall\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bNnpl1IyB6qh",
        "outputId": "1257c458-e0b6-4459-94c9-54f1e55b26a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Alice is 30 years old and 6.2 feet tall\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Rules for Naming Variables\n",
        "#Variable Naming Conventions\n",
        "#Camel Case: myVariableName\n",
        "#Pascal Case: MyVariableName\n",
        "#Snake Case: my_variable_name\n",
        "\n",
        "\n",
        "#Snake Case\n",
        "user_name = \"Karthick\"\n",
        "first_name = \"G\"\n",
        "user_name1 = \"Karthick\"\n",
        "total_count = 10\n",
        "get_user_details = \"Function example\"\n",
        "UserName = \"Karthick\"      #PascalCase (not snake case)\n",
        "userName = \"Karthick\"      # camelCase (not snake case)\n",
        "user name = \"Karthick\"     #space not allowed\n",
        "user-name = \"Karthick\"     # hyphen not allowed\n",
        "1user_name = \"Karthick\"    #cannot start with a number\n",
        "\n",
        "#Camel Case\n",
        "myVariableName = \"Test\"\n",
        "firstName = \"John\"\n",
        "secondName = \"G\"\n",
        "firstName2 = \"Johny\"\n",
        "totalAmountDue = 200\n",
        "FirstName = \"Test\"    # PascalCase\n",
        "first_name = \"Test\"   # snake_case\n",
        "first Name = \"Test\"   # pace not allowed\n",
        "first-Name = \"Test\"  # hyphen not allowed\n",
        "1firstName = \"John\"    #cannot start with a number\n",
        "\n",
        "\n",
        "#Pascal Case\n",
        "MyVariableName = \"Example\"\n",
        "FirstName = \"G\"\n",
        "StudentRecord = \"Data\"\n",
        "StudentRecord2 = \"Data\"\n",
        "ClassTeacher = \"Mr. Ravi\"\n",
        "studentRecord = \"Example\"   #camelCase\n",
        "student_record = \"Example\" #snake_case\n",
        "Student Revord = \"Example\"  #space not allowed\n",
        "Student-Record = \"Example\" #hyphen not allowed\n"
      ],
      "metadata": {
        "id": "plodFvcc_cfd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Local Variable  - Declaring and Calling on the Same Line and Inside Function next line start with gap few lines\n",
        "def my_function():\n",
        "  x = 4\n",
        "  y = 4\n",
        "  z = 2\n",
        "  print(x+y+z)\n",
        "\n",
        "my_function()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WCjgd1YyA1KC",
        "outputId": "fd6dab84-068d-45eb-e781-8adc0b1f2e2b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Global Variables  - Declaring and Calling on the Same Line and Inside Function next line start with gap few lines\n",
        "\n",
        "a = 50\n",
        "\n",
        "def function():\n",
        "  global a\n",
        "  print(a)\n",
        "  a = \"Welcome\"\n",
        "  print(a)\n",
        "\n",
        "function()\n",
        "print(a)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0EHGfZViHvZv",
        "outputId": "c43bd7af-a29d-4654-93f7-54f65a193733"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "50\n",
            "Welcome\n",
            "Welcome\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Delete Variables\n",
        "\n",
        "x = 6\n",
        "print(x)\n",
        "del x\n",
        "print(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 201
        },
        "id": "yX4Nvg_SHvRG",
        "outputId": "8c5e17b5-26fc-4394-98d2-1c93c42208e4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'x' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-150859827.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Output: 6\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mdel\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Output: NameError: name 'x' is not defined\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'x' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Multiple Assignment\n",
        "\n",
        "x,y,z = \"apple\", \"banana\", \"orange\"\n",
        "print(x,y,z)\n",
        "\n",
        "a=b=c = \"fruit\"\n",
        "print(a,b,c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VxQR61m2_cYq",
        "outputId": "5083cd83-5f41-44a5-cadc-1ad4d7167a95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "apple banana orange\n",
            "fruit fruit fruit\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ">>> help(\"keywords\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HwRbY9PmVDez",
        "outputId": "5c378790-d905-4098-e038-fc701e9efc20"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Here is a list of the Python keywords.  Enter any keyword to get more help.\n",
            "\n",
            "False               class               from                or\n",
            "None                continue            global              pass\n",
            "True                def                 if                  raise\n",
            "and                 del                 import              return\n",
            "as                  elif                in                  try\n",
            "assert              else                is                  while\n",
            "async               except              lambda              with\n",
            "await               finally             nonlocal            yield\n",
            "break               for                 not                 \n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ">>> import keyword\n",
        ">>> keyword.kwlist\n",
        "['False', 'None', 'True', 'and', 'as', 'assert', 'async']\n",
        ">>> len(keyword.kwlist)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_rGtHPKXVDbd",
        "outputId": "53d20d28-e2f7-40e6-84ce-02b5163b9a60"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "35"
            ]
          },
          "metadata": {},
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Inputs\n",
        "name = input(\"Enter Your Name: \" )\n",
        "print(\"Hello \" + name)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "akoolFfzVDYy",
        "outputId": "3c3f0a6b-94eb-47ed-f8e0-3811c216380a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter Your Name: Karthick\n",
            "Hello Karthick\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Converting Input to Other Types\n",
        "#Default String\n",
        "#to Integer\n",
        "age = int(input(\"Enter Your Age: \"))\n",
        "print(\"You are\", age, \"years old\")\n",
        "\n",
        "#To Float\n",
        "height = float(input(\"Enter Your Height: \"))\n",
        "print(\"Your height is\", height, \"feet\")\n",
        "\n",
        "#To List Input\n",
        "numbers = input(\"Enter numbers separated by spaces: \").split()\n",
        "numbers = [int(num) for num in numbers]\n",
        "print(\"You entered the numbers:\", numbers)\n",
        "\n",
        "#Taking Multiple Inputs\n",
        "a, b = input(\"Enter two numbers separated by space: \").split()\n",
        "a = int(a)\n",
        "b = int(b)\n",
        "print(\"The first number is\", a)\n",
        "print(\"The second number is\", b)\n",
        "\n",
        "#Using map() for Multiple Inputs\n",
        "a, b = map(int, input(\"Enter two numbers separated by space: \").split())\n",
        "print(\"The first number is\", a)\n",
        "print(\"The second number is\", b)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EXtIrDhqVDVm",
        "outputId": "ac837d8e-f7b9-46ec-acc1-759f28baa16e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter Your Age: 30\n",
            "You are 30 years old\n",
            "Enter Your Height: 4.2\n",
            "Your height is 4.2 feet\n",
            "Enter numbers separated by spaces: 1 2 3 4 5 6 7 9\n",
            "You entered the numbers: [1, 2, 3, 4, 5, 6, 7, 9]\n",
            "Enter two numbers separated by space: 1 3 \n",
            "The first number is 1\n",
            "The second number is 3\n",
            "Enter two numbers separated by space: 5 6\n",
            "The first number is 5\n",
            "The second number is 6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#. Arithmetic Operators\n",
        "\n",
        "x = 10\n",
        "z = 10\n",
        "\n",
        "print(\"Addiyion : \", x+z)\n",
        "print(\"Subtraction:\" , x+z)\n",
        "print(\"Multiplication:\" , x*z)\n",
        "print(\"Division:\" , x/z)\n",
        "print(\"Modulus:\" , x%z)\n",
        "print(\"Exponent:\" , x**z)\n",
        "print(\"Floor Division:\", x // z)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gVZtcD1mVDSC",
        "outputId": "435021ac-1079-45f5-a29c-b45f5fb0dc1b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Addiyion :  20\n",
            "Subtraction: 20\n",
            "Multiplication: 100\n",
            "Division: 1.0\n",
            "Modulus: 0\n",
            "Exponent: 10000000000\n",
            "Floor Division: 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Comparison Operators\n",
        "x = 10\n",
        "z = 11\n",
        "print(\"Equal: \", x == z)\n",
        "print(\"Not equal: \", x != z)\n",
        "print(\"Greater than: \", x > z)\n",
        "print(\"Less than: \", x < z)\n",
        "print(\"Greater than or equal to: \", x >= z)\n",
        "print(\"Less than or equal to: \", x <= z)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_MtucqQ9VDNR",
        "outputId": "1f421684-75b0-4f58-a0c6-77efdf5cb950"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Equal:  False\n",
            "Not equal:  True\n",
            "Greater than:  False\n",
            "Less than:  True\n",
            "Greater than or equal to:  False\n",
            "Less than or equal to:  True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Assignment Operators\n",
        "\n",
        "a = 10\n",
        "a += 5\n",
        "print(\"Add and assign:\", a)\n",
        "a -= 5\n",
        "print(\"Subtract and assign:\", a)\n",
        "a *= 5\n",
        "print(\"Multiply and assign:\", a)\n",
        "a /= 5\n",
        "print(\"Divide and assign:\", a)\n",
        "a %= 5\n",
        "print(\"Modulus and assign:\", a)\n",
        "a **= 5\n",
        "print(\"Exponent and assign:\", a)\n",
        "a //= 5\n",
        "print(\"Floor divide and assign:\", a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eLllQ4E0VC-_",
        "outputId": "88bc6c2c-5f3e-4509-ef83-b3fc7fab4469"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Add and assign: 15\n",
            "Subtract and assign: 10\n",
            "Multiply and assign: 50\n",
            "Divide and assign: 10.0\n",
            "Modulus and assign: 0.0\n",
            "Exponent and assign: 0.0\n",
            "Floor divide and assign: 0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Logical Operators\n",
        "\n",
        "x = True\n",
        "y = False\n",
        "z = True\n",
        "print(\"Logical AND:\", x and y)\n",
        "print(\"Logical AND:\", x and z)\n",
        "print(\"Logical OR:\", x or y)\n",
        "print(\"Logical OR:\", x or z)\n",
        "print(\"Logical NOT:\", not x)\n",
        "print(\"Logical NOT:\", not z)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gvMfVwhJa_Pg",
        "outputId": "a106f33a-85af-451b-84fd-0aa924debb47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logical AND: False\n",
            "Logical AND: True\n",
            "Logical OR: True\n",
            "Logical OR: True\n",
            "Logical NOT: False\n",
            "Logical NOT: False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Bitwise Operators\n",
        "\n",
        "x = 5\n",
        "z = 3\n",
        "\n",
        "print(\"Bitwise AND:\", x & z)\n",
        "print(\"Bitwise OR:\", x | z)\n",
        "print(\"Bitwise XOR:\", x ^ z)\n",
        "print(\"Bitwise NOT:\", ~x)\n",
        "print(\"Left shift:\", x << 1)\n",
        "print(\"Right shift:\", x >> 1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dqzMqA9ObAMh",
        "outputId": "25f5b2d7-a080-4503-e96c-4cf2094a8dee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Bitwise AND: 1\n",
            "Bitwise OR: 7\n",
            "Bitwise XOR: 6\n",
            "Bitwise NOT: -6\n",
            "Left shift: 10\n",
            "Right shift: 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Membership Operator\n",
        "List = [1,2,3,4]\n",
        "print(\"Is 1 in list:\", 1 in List)\n",
        "print(\"Is 5 in list:\", 5 in List)\n",
        "print(\"Is 5 not in list:\", 5 not in List)\n",
        "print(\"Is 2 not in list:\", 2 not in List)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MzgV-KTcbAJ0",
        "outputId": "a3dd8913-71dd-4828-c832-b3fff9487052"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Is 1 in list: True\n",
            "Is 5 in list: False\n",
            "Is 5 not in list: True\n",
            "Is 2 not in list: False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Identity Operators\n",
        "x = 5\n",
        "y = 5\n",
        "print(\"x is y: \" , x is y)\n",
        "print(\"x is not y: \" , x is not y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1TOTFJi-bAGg",
        "outputId": "22fad12d-1f65-44e2-e147-231bf0a47b59"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x is y:  True\n",
            "x is not y:  False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Typecasting\n",
        "#Implicit Typecasting\n",
        "#Integer + Float\n",
        "a = 5\n",
        "b = 2.5\n",
        "c = a + b\n",
        "print(c)\n",
        "print(type(c))\n",
        "\n",
        "#Integer + Complex\n",
        "a = 5        # int\n",
        "b = 2 + 3j   # complex\n",
        "c = a + b\n",
        "print(c)\n",
        "print(type(c))\n",
        "\n",
        "#Boolean + Integer\n",
        "a = True     # bool (value = 1)\n",
        "b = 5        # int\n",
        "c = a + b\n",
        "print(c)\n",
        "print(type(c))\n",
        "\n",
        "#Integer / Integer (division)\n",
        "a = 10\n",
        "b = 4\n",
        "c = a / b\n",
        "print(c)\n",
        "print(type(c))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ioEAyT2ThAxT",
        "outputId": "8945b983-1de2-45d3-bd22-7675ab721759"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7.5\n",
            "<class 'float'>\n",
            "(7+3j)\n",
            "<class 'complex'>\n",
            "6\n",
            "<class 'int'>\n",
            "2.5\n",
            "<class 'float'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "xIawt-ZoVCwG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Explicit Typecasting\n",
        "#int(): Converts a value to an integer.\n",
        "#float(): Converts a value to a float.\n",
        "#str(): Converts a value to a string.\n",
        "#list(): Converts a value to a list.\n",
        "#tuple(): Converts a value to a tuple.\n",
        "#set(): Converts a value to a set.\n",
        "#dict(): Converts a value to a dictionary (from a list of key-value pairs).\n",
        "#bool(): Converts a value to a boolean."
      ],
      "metadata": {
        "id": "geAv1h86iwt4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#String to Integer\n",
        "x = \"10\"\n",
        "y = int(x)\n",
        "print(y)\n",
        "print(type(y))\n",
        "\n",
        "#Floats to Integer\n",
        "x = 10.5\n",
        "y = int(x)\n",
        "print(y)\n",
        "print(type(y))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hbXxSG2miwqx",
        "outputId": "994d0684-c7a5-454f-b8bf-f2e7abd0ecfd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n",
            "<class 'int'>\n",
            "10\n",
            "<class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#String to Float\n",
        "\n",
        "x = \"10.50\"\n",
        "y = float(x)\n",
        "print(y)\n",
        "print(type(y))\n",
        "\n",
        "#Integer to Float\n",
        "x = 10\n",
        "y = float(x)\n",
        "print(y)\n",
        "print(type(y))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wE2K-JA9iwnB",
        "outputId": "bba7e3b0-e5be-4b71-efc1-e7a6b65531a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10.5\n",
            "<class 'float'>\n",
            "10.0\n",
            "<class 'float'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Integer to String\n",
        "x = 145\n",
        "y = str(x)\n",
        "print(y)\n",
        "print(type(y))\n",
        "\n",
        "#Floats to Sting\n",
        "x = 10.50\n",
        "y = str(x)\n",
        "print(y)\n",
        "print(type(y))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A0SXZ_FoktMe",
        "outputId": "dbf394b3-7d98-496d-af34-dd477182b4fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "145\n",
            "<class 'str'>\n",
            "10.5\n",
            "<class 'str'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#String to List\n",
        "x = \"Hello\"\n",
        "y = list(x)\n",
        "print(y)\n",
        "print(type(y))\n",
        "\n",
        "#Tulpe to List\n",
        "x = (1,2,3,4)\n",
        "y = list(x)\n",
        "print(y)\n",
        "print(type(y))\n",
        "\n",
        "#Set to List\n",
        "x = {10, 20, 30}\n",
        "y = list(x)\n",
        "print(y)\n",
        "print(type(y))\n",
        "\n",
        "#Dicsionary to List\n",
        "x = {'a': 1, 'b': 2, 'c': 3}\n",
        "y = list(x)\n",
        "print(y)\n",
        "print(type(y))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aI1a6bdtktIL",
        "outputId": "af6b72de-3e2e-4625-eb0c-14086264be84"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['H', 'e', 'l', 'l', 'o']\n",
            "<class 'list'>\n",
            "[1, 2, 3, 4]\n",
            "<class 'list'>\n",
            "[10, 20, 30]\n",
            "<class 'list'>\n",
            "['a', 'b', 'c']\n",
            "<class 'list'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#String To Set\n",
        "x = \"Hello\"\n",
        "y = set(x)\n",
        "print(y)\n",
        "print(type(y))\n",
        "\n",
        "#Tuple to Set\n",
        "x = (1,2,3,4)\n",
        "y = set(x)\n",
        "print(y)\n",
        "print(type(y))\n",
        "\n",
        "#List to Set\n",
        "x = [10, 20, 30]\n",
        "y = set(x)\n",
        "print(y)\n",
        "print(type(y))\n",
        "\n",
        "#Dictionary to Set\n",
        "x = {'a': 1, 'b': 2, 'c': 3}\n",
        "y = set(x)\n",
        "print(y)\n",
        "print(type(y))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EmnWvh0pktFG",
        "outputId": "8a8267b4-63e7-4eaa-e068-300852d427e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'l', 'H', 'o', 'e'}\n",
            "<class 'set'>\n",
            "{1, 2, 3, 4}\n",
            "<class 'set'>\n",
            "{10, 20, 30}\n",
            "<class 'set'>\n",
            "{'c', 'a', 'b'}\n",
            "<class 'set'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#String To Tuple\n",
        "x = \"Hello\"\n",
        "y = tuple(x)\n",
        "print(y)\n",
        "print(type(y))\n",
        "\n",
        "#List to Tuple\n",
        "x = [10, 20, 30]\n",
        "y = tuple(x)\n",
        "print(y)\n",
        "print(type(y))\n",
        "\n",
        "#Set to Tuple\n",
        "x = {10, 20, 30}\n",
        "y = tuple(x)\n",
        "print(y)\n",
        "print(type(y))\n",
        "\n",
        "#Dictionary to Tuple\n",
        "x = {'a': 1, 'b': 2, 'c': 3}\n",
        "y = tuple(x)\n",
        "print(y)\n",
        "print(type(y))\n",
        "3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5lkNnXOpiwjs",
        "outputId": "1398cd87-a58d-45c8-aac8-2c9ee69e9bc9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('H', 'e', 'l', 'l', 'o')\n",
            "<class 'tuple'>\n",
            "(10, 20, 30)\n",
            "<class 'tuple'>\n",
            "(10, 20, 30)\n",
            "<class 'tuple'>\n",
            "('a', 'b', 'c')\n",
            "<class 'tuple'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# List of Tuples to Dictionary\n",
        "x = [('a', 1), ('b', 2), ('c', 3)]\n",
        "y = dict(x)\n",
        "print(y)\n",
        "print(type(y))\n",
        "\n",
        "# List to Dictionary\n",
        "x = ['a', 'b', 'c']\n",
        "y = [1, 2, 3]\n",
        "z = dict(zip(x, y))\n",
        "print(z)\n",
        "print(type(z))\n",
        "\n",
        "# Sets of Tuples to Dictionary\n",
        "x = {('a', 1), ('b', 2), ('c', 3)}\n",
        "y = dict(x)\n",
        "print(y)\n",
        "print(type(y))\n",
        "\n",
        "# Sets to Dictionary\n",
        "x = {'a', 'b', 'c'}\n",
        "y = {1, 2, 3}\n",
        "z = dict(zip(x, y))\n",
        "print(z)\n",
        "print(type(z))\n",
        "\n",
        "# Tuples to Dictionary\n",
        "x = (('a', 1), ('b', 2), ('c', 3))\n",
        "y = dict(x)\n",
        "print(y)\n",
        "print(type(y))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DnFu9ZuNiweX",
        "outputId": "25ce90e6-ca95-4f27-96b5-5301fa4af42f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'a': 1, 'b': 2, 'c': 3}\n",
            "<class 'dict'>\n",
            "{'a': 1, 'b': 2, 'c': 3}\n",
            "<class 'dict'>\n",
            "{'a': 1, 'c': 3, 'b': 2}\n",
            "<class 'dict'>\n",
            "{'c': 1, 'a': 2, 'b': 3}\n",
            "<class 'dict'>\n",
            "{'a': 1, 'b': 2, 'c': 3}\n",
            "<class 'dict'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Integer to Boolean\n",
        "x = 1\n",
        "y = bool(x)\n",
        "print(y)\n",
        "print(type(y))\n",
        "\n",
        "# String to Boolean\n",
        "x = \"Hello\"\n",
        "y = bool(x)\n",
        "print(y)\n",
        "print(type(y))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dIF5oj2ugm5T",
        "outputId": "62ed26ca-121c-4592-cd5a-26b6d7e9df1f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "<class 'bool'>\n",
            "True\n",
            "<class 'bool'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "7rDSZ3knqqYj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "7iX7Ipy6qqMz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CjxEq6OjB0FV",
        "outputId": "f7257584-35ae-4435-f47a-6221cbec7917"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "set"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "s = {1,2,3}\n",
        "type(s)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = {1,2}\n",
        "print(s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qojqWENmGmOj",
        "outputId": "8bdd1cc4-eda4-4d80-a41c-dd689a1f9821"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1, 2}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = {1}\n",
        "s2 = {2}"
      ],
      "metadata": {
        "id": "0OvH5EDuGmQ8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#convert list to set\n",
        "l = [1,2,3,4,5,6,12,3,4,5]\n",
        "set(l)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_kmRi4ATGmUe",
        "outputId": "35bcb2bc-0695-44a7-e181-b4aff6879f6d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{1, 2, 3, 4, 5, 6, 12}"
            ]
          },
          "metadata": {},
          "execution_count": 193
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Converts the result from map() into a list.\n",
        "d = {'No':0, \"Yes\":1}\n",
        "l = [\"No\",\"Yes\",\"No\"]\n",
        "s = map(d.get,l)\n",
        "list(s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X5rhcECIGmXm",
        "outputId": "e772ded4-981e-4c3a-8ef9-34b5e0228488"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0, 1, 0]"
            ]
          },
          "metadata": {},
          "execution_count": 195
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#converts words in list l into their numeric values using dictionary d,and stores them in a list named s.\n",
        "d = {'No':0, \"Yes\":1}\n",
        "l = [\"No\",\"Yes\",\"No\"]\n",
        "s = [d[x] for x in l]\n",
        "print(s)\n",
        "type(s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a4HSM5aBuGC8",
        "outputId": "27c55cf3-f72e-4384-a69e-089c7068f823"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 1, 0]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "list"
            ]
          },
          "metadata": {},
          "execution_count": 198
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#converts each \"Yes\" to 1 and each \"No\" to 0 using a function and map().\n",
        "def func(x):\n",
        "  if x == \"Yes\":\n",
        "    x = 1\n",
        "  elif x == \"No\":\n",
        "    x = 0\n",
        "  return x\n",
        "l = [\"No\",\"Yes\",\"No\"]\n",
        "s = map(func,l)\n",
        "list(s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GKsqoNDztNY5",
        "outputId": "7c566da7-380a-45c3-c07e-2cfa2f83dd67"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0, 1, 0]"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#code converts each \"Yes\" in the tuple to 1 and each \"No\" to 0,and prints the result as a list → [1, 0, 1].\n",
        "l=('Yes','No','Yes')\n",
        "print(list(map(func,l)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-spQsB0jurfT",
        "outputId": "ca7b3919-3e81-4f64-eed8-94f2a1fd357f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 0, 1]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "l1sNVgIHWNvT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Practice Questions - 9/14"
      ],
      "metadata": {
        "id": "E393OS-fWOFJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#What will be the output of the following code?\n",
        "x = \"5\"\n",
        "y = \"10\"\n",
        "print(x + y)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NkWHbCPOUDcg",
        "outputId": "63d58d21-452c-4cdf-8df4-65c8799fb1c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "510\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Given the dictionary d = {'a': 1, 'b': 2}, what will d.get('c', 3) return?\n",
        "#A) 1\n",
        "#B) 2\n",
        "#C) None\n",
        "#D) 3\n",
        "\n",
        "# Example: Using get() method in a dictionary\n",
        "d = {'a': 1, 'b': 2}     # dictionary\n",
        "# Try to get the value for key 'c'\n",
        "result = d.get('c', 3)   # since 'c' not in dictionary, default value 3 is returned\n",
        "print(\"Dictionary:\", d)\n",
        "print(\"Result of d.get('c', 3):\", result)\n",
        "\n"
      ],
      "metadata": {
        "id": "9e6E55DzUDfC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4625a410-eb6d-433a-8c1b-13338eff6878"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dictionary: {'a': 1, 'b': 2}\n",
            "Result of d.get('c', 3): 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Since 'c' is not a key in the dictionary,\n",
        "#d.get('c', 5) returns the default value 5.\n",
        "d = {'a': 1, 'b': 2}\n",
        "d.get('c',5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "38ljwIpgUDh_",
        "outputId": "bfda8f71-3668-40b7-b594-13efef3a8408"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5"
            ]
          },
          "metadata": {},
          "execution_count": 204
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#What will be the output of the following code?\n",
        "a, b = 5, 3\n",
        "a %= b\n",
        "print(a)\n"
      ],
      "metadata": {
        "id": "CVAboUv0UDks",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a7fc3a85-6472-4002-d2f0-492a17423cd5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#list elements are accessed based on their index position — starting from 0 for the first item.\n",
        "l = [0,3,4,5,6,8,9,19]\n",
        "\n",
        "l[4]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NmVCNvU6UDnz",
        "outputId": "5b4c186e-3fe3-436b-d61b-2b5ab8c7ea5f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#In slicing l[start:end], the end index is excluded from the result.\n",
        "#Start index is not given → it starts from 0 by default.\n",
        "#So l[:4] gives elements from index 0 up to (but not including) 4.\n",
        "l = [0,3,4,5,6,8,9,19]\n",
        "l[:4]  ###End slicer value is never included in the output"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fPyCVSZ5UDqw",
        "outputId": "77899415-c838-40b9-e26c-36fa9417ea5f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0, 3, 4, 5]"
            ]
          },
          "metadata": {},
          "execution_count": 206
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Start from index 2 (inclusive → include value at index 2).\n",
        "#Stop before index 5 (exclusive → do not include value at index 5).\n",
        "l = [0,3,4,5,6,8,9,19]\n",
        "l[2:5]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UxbZTVEhUDtc",
        "outputId": "edc68399-b1cb-416a-e624-18cdd16ec4e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[4, 5, 6]"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Start from index 5 (inclusive).\n",
        "#No end index is given → so it goes till the end of the list.\n",
        "l = [0,3,4,5,6,8,9,19]\n",
        "l[5:]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1LBYtOA3UDv_",
        "outputId": "24ae8340-de94-4ad9-eaca-255373d18975"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[8, 9, 19]"
            ]
          },
          "metadata": {},
          "execution_count": 207
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#It starts at index -2 (value = 9)\n",
        "#It tries to go forward to index -5 — but -5 is to the left (earlier in the list).\n",
        "#Since the direction is backward but no negative step (-1) is given, Python returns an empty list.\n",
        "\n",
        "l = [0,3,4,5,6,8,9,19]\n",
        "l[-2:-5]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jj7rvxA6ZgqJ",
        "outputId": "d80a7f6e-4638-4a46-c331-ed8a4fde0dac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 210
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Start at index -2 → (value 9)\n",
        "#Move forward (default step = +1)\n",
        "#Stop just before index -1 → (value 19)\n",
        "#takes all elements from index -2 up to, but not including, index -1.\n",
        "\n",
        "l = [0,3,4,5,6,8,9,19]\n",
        "l[-2:-1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WRUuNV7p9vjt",
        "outputId": "83b115b9-e859-4887-f2f1-c6b93ae673de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[9]"
            ]
          },
          "metadata": {},
          "execution_count": 213
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#2 refers to value = 4, 0 refers to value = 0, The slice l[2:0] means:\n",
        "#2 refers to value = 4, 0 refers to value = 0,\n",
        "#Start at index 2 → (value 4), Move forward (default step = +1) , Stop before index 0 → (value 0)\n",
        "#Since the slicing direction is forward,but the end index (0) is before the start index (2),Python can’t move forward — so it returns an empty list.\n",
        "\n",
        "l = [0,3,4,5,6,8,9,19]\n",
        "l[2:0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jX2DM_0UZ2lH",
        "outputId": "3a2a09ee-21d3-4509-dfe0-99f53b2fbb6e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 214
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#-5 refers to value = 5, -2 refers to value = 9, The slice l[-5:-2] means:\n",
        "#Start at index -5 → (value 5), Move forward (default step = +1), Stop just before index -2 → (value 9)\n",
        "#So takes all elements from index -5 up to, but not including, index -2.\n",
        "\n",
        "l = [0,3,4,5,6,8,9,19]\n",
        "l[-5:-2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mU0WAZMfZ70K",
        "outputId": "f2fad9eb-3d6d-41a1-ca13-a11a4a1ca249"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[5, 6, 8]"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#The slice l[:-5] means: No start index → so it starts from the beginning of the list (index 0 → value 0), End index = -5 → value at index -5 is 5\n",
        "#Move forward (default step = +1), Stop just before index -5 (do not include it), So takes all elements from the start up to, but not including, index -5.\n",
        "\n",
        "l = [0,3,4,5,6,8,9,19]\n",
        "l[:-5]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fNMOLYq4aELL",
        "outputId": "fc43d8e0-8e94-4293-af8e-fd1f5d535ff3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0, 3, 4]"
            ]
          },
          "metadata": {},
          "execution_count": 215
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Let’s break the slice l[:-1:3]:\n",
        "#Start: no value → defaults to the beginning (index 0), Stop: -1 → means stop before index -1 (value 19), Step: 3 → take every 3rd element moving forward\n",
        "#Start at index 0 → 0, Move forward by +3 steps → index 3 → 5, Move forward by +3 again → index 6 → 9, Next step would be index 9, which doesn’t exist — so it stops.\n",
        "\n",
        "l = [0,3,4,5,6,8,9,19]\n",
        "l[:-1:3]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-WqFQK_fataL",
        "outputId": "49ef1f92-5895-4764-fccf-e79d184e44bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0, 5, 9]"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#The slice l[::2] has three parts:\n",
        "#Start: not given → starts from the beginning (index 0),Stop: not given → goes till the end of the list, Step: 2 → take every 2nd element\n",
        "#So takes elements starting from index 0 and skips one each time:Index 0 → 0, Index 2 → 4 , Index 4 → 6, Index 6 → 9, The next index would be 8, which is out of range, so it stops.\n",
        "\n",
        "l = [0,3,4,5,6,8,9,19]\n",
        "l[::2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9H-bc4_fb1HI",
        "outputId": "b605405a-fb9a-4ad3-a75e-2156cba53d3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0, 4, 6, 9]"
            ]
          },
          "metadata": {},
          "execution_count": 217
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#The slice l[::-1] has three parts:  Start: not given → default is the end of the list, Stop: not given → default is the start of the list, Step: -1 → move backward (right to left)\n",
        "#So starts from the last element and goes backward one step at a time:It reaches the start and stops.\n",
        "l = [0,3,4,5,6,8,9,19]\n",
        "l[::-1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VAXTcCG-b_X8",
        "outputId": "27b0d4b3-811d-4ea4-a2ee-985e68b480f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[19, 9, 8, 6, 5, 4, 3, 0]"
            ]
          },
          "metadata": {},
          "execution_count": 218
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#The slice l[::-2] has three parts:Start: not given → default is the end of the list,Stop: not given → default is the start of the list, Step: -2 → move backward, taking every 2nd element\n",
        "#So starts from the last element and moves backward, skipping one each time: The next step would be index -9, which doesn’t exist — so it stops.\n",
        "\n",
        "l = [0,3,4,5,6,8,9,19]\n",
        "l[::-2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w_md81LtcSL9",
        "outputId": "481a6e3b-4704-4912-8085-4342c4ef1764"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[19, 8, 5, 3]"
            ]
          },
          "metadata": {},
          "execution_count": 219
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#The slice s[::-1] has three parts:Start: not given → default is the end of the string,Stop: not given → default is the start of the string,Step: -1 → move backward, one character at a time\n",
        "#So starts from the last character and moves left one by one: It joins them all together into a new string.\n",
        "s = \"kcihtraK\"\n",
        "s[::-1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "JvKB3XIWcZoI",
        "outputId": "6404f830-a927-451b-a599-6f171b3e8880"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Karthick'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 222
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "gxnz3bVXGyd9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#the slice l[:-1:3] has three parts:Start: not given → start from the beginning (index 0), Stop: -1 → stop before index -1 (i.e., before the last element, 19).\n",
        "#Step: 3 → take every 3rd element moving forward, So:\n",
        "#Start at index 0 → 0, Move forward by 3 → index 3 → 5, Move forward by 3 again → index 6 → 9, The next index would be 9 (out of range), so it stops.\n",
        "\n",
        "l = (0,3,4,5,6,8,9,19)\n",
        "l[:-1:3]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qglVCbawc5wY",
        "outputId": "fa4f7346-7bb5-472e-d50c-7e4aa68c20f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0, 5, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 223
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Index:  0   1   2     3        4\n",
        "#Value: [1,  0,  3,   [2,3],   'a']\n",
        "l = [1,0,3,[2,3],'a']\n",
        "l[4]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "l1eMYNsFdDx9",
        "outputId": "fbb191c3-c954-4690-d266-390deeb05474"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'a'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 224
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l = [0,3,4,5,6,8,9,19]\n",
        "type(l)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fjj0XBBjdD0d",
        "outputId": "43d986cb-9064-481d-d150-4ca70fef3dac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "list"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#So, the value of x is 41.→ Checks whether 41 > 30 → True,so enters the inner if block.Inside that block, there’s another condition:\n",
        "#41 % 2 gives 1 (since 41 is odd).So 1 == 0 → False,Because the inner if is False, Python goes to the else part:This executes and prints \"A\".\n",
        "#The pass statement in the inner if is ignored because that block didn’t run.\n",
        "x = 41\n",
        "if x > 30:\n",
        "  if x%2==0:\n",
        "    pass\n",
        "  else:\n",
        "    print(\"A\")\n",
        "else:\n",
        "  print('Condition not passed')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Buf82TNJdD6i",
        "outputId": "c8fdf3b1-8314-4424-ef3b-c192256ffa2b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Condition not passed\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#So, the value of x is 41.Checks whether 41 < 30 → False,Because this if condition is False, So skips the entire inner block (if x % 2 == 0: … else:).\n",
        "#It goes directly to the outer else:That statement runs and prints 'Condition not passed'.\n",
        "x = 41\n",
        "if x < 30:\n",
        "  if x%2==0:\n",
        "    pass\n",
        "  else:\n",
        "    print(\"A\")\n",
        "else:\n",
        "  print('Condition not passed')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5-IzNIH0JbzH",
        "outputId": "4a4b1c70-e950-4825-e56b-743703ff36a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Condition not passed\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#So, the value of x is 41.Checks whether 41 > 30 → True, So goes inside the first if block.Next condition (nested if):41 % 2 = 1 → True (because 41 is odd)\n",
        "#Since this condition is True, Python executes the statement inside this block:pass means do nothing — it just skips to the next statement (there is none).\n",
        "#So, no output is produced from this branch.The inner else: block (print(\"A\")) is not executed because the inner if was true.The outer else: is also not executed, because x > 30 was true.\n",
        "x = 41\n",
        "if x > 30:\n",
        "  if x%2==1:\n",
        "    pass\n",
        "  else:\n",
        "    print(\"A\")\n",
        "else:\n",
        "  print('Condition not passed')"
      ],
      "metadata": {
        "id": "WRjnnVvUJbgO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#The range() function in generates a sequence of numbers, not a list by itself.It’s often used for loops or iterations.\n",
        "#range(start, stop, step), start → where to begin (default = 0) stop → where to stop (exclusive, not included) step → difference between each number (default = 1)\n",
        "#Here, only one argument (10) is given.So it starts from 0 (default) and goes up to 9 (because 10 is excluded).\n",
        "range(10)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qR2uftJ1dD9Z",
        "outputId": "85d8a99c-c13e-412f-cc1c-aee11d4d0c9d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "range(0, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 236
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#The range(10) part generates a sequence of numbers from 0 to 9 (10 is not included).→ So it’s equivalent to:\n",
        "#The for loop goes through each number in that sequence one by one, assigning it to the variable i.Inside the loop, print(i) outputs the current value of i on a new line each time.\n",
        "\n",
        "for i in range(10):\n",
        "  print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iIVJLAtMjaTT",
        "outputId": "b07cd289-472d-4ae8-d811-c2b1127206d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#The list l contains: An empty list s = [] is created to store the results.The for loop iterates over each element i in the list l.\n",
        "#If the number is even (i % 2 == 0), it checks if it’s also divisible by 3 (i % 3 == 0).If yes → executes pass (does nothing).Then still appends \"Even\".\n",
        "#If the number is not even, it goes to the else part → appends \"Odd\".\n",
        "\n",
        "l = [1,4,5,7,8,9,6,0,10]\n",
        "s = []\n",
        "for i in l:\n",
        "  if i%2 ==0 :\n",
        "    if i%3 ==0:\n",
        "      pass\n",
        "    s.append(\"Even\")\n",
        "  else:\n",
        "    s.append(\"Odd\")\n",
        "print(s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z6xkxo2sjmyQ",
        "outputId": "c2c6d036-171f-4fb0-cafc-d39c8c7b9ea1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Odd', 'Even', 'Odd', 'Odd', 'Even', 'Odd', 'Even', 'Even', 'Even']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "  File \"/tmp/ipython-input-1390570892.py\", line 1\n",
        "    Write a program that continuously asks the user to provide an input number.\n",
        "          ^\n",
        "SyntaxError: invalid syntax\n"
      ],
      "metadata": {
        "id": "ygnO7wzNqd3_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "Write a program that continuously asks the user to provide an input number.\n",
        "Print the square of that input number.\n",
        "The program should stop if the user enters 5.\n",
        "In case user enters any multiple of 4, skip it."
      ],
      "metadata": {
        "id": "rW_X6LodqlOx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#while True:This creates an infinite loop that keeps running until we stop it manually using break.num = int(input(...))\n",
        "#The program continuously asks the user to enter a number.The input is converted to an integer using int().Check if num == 5:\n",
        "#If the user enters 5, the condition becomes true.The program prints \"Program stopped.\"The break statement immediately ends the loop, stopping the program.Check if num % 4 == 0:\n",
        "#% is the modulo operator → gives the remainder.If a number is divisible by 4 (remainder 0), it’s a multiple of 4.The program prints \"Multiple of 4 entered — skipping...\"\n",
        "#The continue statement skips the rest of the loop and asks for the next input.Otherwise (for all other numbers):The program prints the square of the number using num ** 2.\n",
        "\n",
        "while True:\n",
        "    num = int(input(\"Enter a number: \"))\n",
        "\n",
        "    # Condition 1: Stop when user enters 5\n",
        "    if num == 5:\n",
        "        print(\"Program stopped.\")\n",
        "        break\n",
        "    # Condition 2: Skip if multiple of 4\n",
        "    if num % 4 == 0:\n",
        "        print(\"Multiple of 4 entered — skipping...\")\n",
        "        continue\n",
        "    # Otherwise: print the square\n",
        "    print(\"Square of\", num, \"is\", num ** 2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M4wDd1agOLO2",
        "outputId": "2585927f-8a1f-4eac-b362-97b9b41c3735"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a number: 4\n",
            "Multiple of 4 entered — skipping...\n",
            "Enter a number: 9\n",
            "Square of 9 is 81\n",
            "Enter a number: 0\n",
            "Multiple of 4 entered — skipping...\n",
            "Enter a number: 5\n",
            "Program stopped.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#while True:Creates an infinite loop.This means the code inside keeps running again and again until something stops it.We’ll stop it later using the break statement.\n",
        "#i = int(input(\"Enter number: \"))Asks the user to enter a number.The input is converted from a string to an integer using int().The variable i stores that number for later checks.\n",
        "#if i == 5:This checks whether the entered number is exactly 5.If True, the program prints:and then:break immediately stops the loop, even if it hasn’t finished all iterations.\n",
        "#So when user enters 5, the program ends completely.if i % 4 == 0:% is the modulo operator, it gives the remainder when dividing i by 4.\n",
        "#If remainder is 0 → number is a multiple of 4 (like 4, 8, 12, 16, ...).If True, the program prints:and then:continue means skip the rest of the loop body and go back to the top of the loop for the next input.\n",
        "#So the next line (print(i ** 2)) is not executed in this case.print(i ** 2)This only runs if both previous conditions are False, meaning:The number is not 5,The number is not a multiple of 4\n",
        "#Then it prints the square of that number (i ** 2).\n",
        "while True:\n",
        "  i = int(input(\"Enter number: \"))\n",
        "  if i == 5:\n",
        "    print(\"Loop broke\")\n",
        "    break\n",
        "  if i%4 ==0 :\n",
        "    print(\"Loop Skipped and continued\")\n",
        "    continue\n",
        "  print(i**2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tDPLxBGCqmuA",
        "outputId": "3e59d0f1-32bc-443b-f182-1ff7a793a149"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter number: 3\n",
            "9\n",
            "Enter number: 4\n",
            "Loop Skipped and continued\n",
            "Enter number: 8\n",
            "Loop Skipped and continued\n",
            "Enter number: 7\n",
            "49\n",
            "Enter number: 5\n",
            "Loop broke\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rows = 3\n",
        "cols = 5\n",
        "for i in range(rows):\n",
        "    for j in range(cols):\n",
        "        print(\"*\", end=\"\")\n",
        "    print()\n"
      ],
      "metadata": {
        "id": "09BSUhwkt-3x",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "977b97c4-bbb2-40e2-abb0-b1f8ac3c63c1"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "*****\n",
            "*****\n",
            "*****\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for x in range(3):\n",
        "  for y in range(5):\n",
        "    print('*', end = '')\n",
        "  print('')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "--c_V3BVvo1Q",
        "outputId": "b6d969b5-686a-4b80-b171-f5d6378e8f71"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "*****\n",
            "*****\n",
            "*****\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "4zAY4ws8t-6Q",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "outputId": "d6fd2805-7a47-4e51-e6d3-1ecfb28eab39"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (ipython-input-3310241707.py, line 1)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-3310241707.py\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    *\u001b[0m\n\u001b[0m     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n = 5\n",
        "for x in range(n):\n",
        "  for y in range(x + 1):\n",
        "    print('*', end = \"\")\n",
        "  print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-4FRt9bMwUPo",
        "outputId": "d31248ad-ff06-4332-a73f-37cafc8e72b6"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "*\n",
            "**\n",
            "***\n",
            "****\n",
            "*****\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "    *\n",
        "   ***\n",
        "  *****\n",
        " *******\n",
        "*********"
      ],
      "metadata": {
        "id": "ZMtIPsP0uHGa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "n = 5\n",
        "for i in range(n):\n",
        "  for j in range(n-i-1):\n",
        "    print(' ',end ='')\n",
        "  for z in range(2*i+1):\n",
        "    print('*', end = '')\n",
        "  print('')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g0YZtaQqx2-m",
        "outputId": "a420c9a6-0fa0-4d86-fde7-85117837e4c7"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    *\n",
            "   ***\n",
            "  *****\n",
            " *******\n",
            "*********\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "    *\n",
        "   ***\n",
        "  *****\n",
        " *******\n",
        "*********\n",
        " *******\n",
        "  *****\n",
        "   ***\n",
        "    *"
      ],
      "metadata": {
        "id": "bMPEl8nJ2Zmu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "n = 5\n",
        "for i in range(n):\n",
        "  print(\" \"*(n-i-1) + '*' * (2*i+1))\n",
        "for i in range(n-1, -1, -1):\n",
        "  print(\" \" * (n-i) + '*' * (2*i-1))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hga9RARFQwIT",
        "outputId": "d8b6d1b0-8518-4f46-c72b-c9fc240d183c"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    *\n",
            "   ***\n",
            "  *****\n",
            " *******\n",
            "*********\n",
            " *******\n",
            "  *****\n",
            "   ***\n",
            "    *\n",
            "     \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "*****\n",
        "*   *\n",
        "*   *\n",
        "*   *\n",
        "*****\n"
      ],
      "metadata": {
        "id": "lriC3m5M2al-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "n = 5\n",
        "for i in range(n):\n",
        "  if i == 0 or i == n-1:\n",
        "    print('*'* n)\n",
        "  else:\n",
        "    print(\"*\" + \" \"*(n-2) + \"*\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1ferAMGQVWTE",
        "outputId": "7395cde2-e68b-4a89-acd9-fe2e5a494d9e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "*****\n",
            "*   *\n",
            "*   *\n",
            "*   *\n",
            "*****\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = [1,2,3,[4,5],5,6,77,8]\n",
        "s3 = s.pop(3)\n",
        "s3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vJA89LC12ekH",
        "outputId": "67b2bd15-117c-466e-f7b2-df5f0dd76190"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[4, 5]"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l-DAQeO5380H",
        "outputId": "13245a9a-5e55-4114-83fd-2f4c915b6098"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 2, 3, 5, 6, 77, 8]"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Write a program to check palindrome - With loops\n",
        "Write program count the blank spaces.\n",
        "Write a program to Reversing a String without using reverse()- Try doing this with looops\n",
        "Write a program to count no. of vowels and print all the vowels."
      ],
      "metadata": {
        "id": "GdFMTcOp5Rab"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Write a program to check palindrome - With loops\n",
        "s = input(\"Enter a word or number: \")\n",
        "s = s.lower()\n",
        "rev = \"\"\n",
        "for i in range(len(s) - 1, -1, -1):    rev += s[i]\n",
        "if s == rev:\n",
        "    print(\"It's a palindrome!\")\n",
        "else:\n",
        "    print(\"It's not a palindrome.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wiJYgitZLYAM",
        "outputId": "129ac9a4-eb80-4d50-8bf5-9aef0e61dfa4"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a word or number: madam\n",
            "It's a palindrome!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "p = 'hello'\n",
        "if p == p[::-1]:\n",
        "  print(\"yes palindrome\")\n",
        "else:\n",
        "  print(\"not palindrome\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "quCXwnVqMsbF",
        "outputId": "ac12196f-773f-4b4a-d7f4-4c3d0dab3d54"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "not palindrome\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "p = 'madam'\n",
        "if p == p[::-1]:\n",
        "  print(\"yes palindrome\")\n",
        "else:\n",
        "  print(\"not palindrome\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JEHcprQ3LX59",
        "outputId": "fdef6664-fadd-42bd-e5fe-c9fdfd17f406"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "yes palindrome\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "p = 'abcba'\n",
        "p[::-1]\n",
        "if p == p[::-1]:\n",
        "  print(\"yes palindrome\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e56jks8HLXrA",
        "outputId": "446dad3a-dd7a-414e-e736-23971ef56dbe"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "yes palindrome\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Write program count the blank spaces.\n",
        "text = input(\"Enter a sentence: \")\n",
        "count = 0\n",
        "for ch in text:\n",
        "    if ch == \" \":\n",
        "        count += 1\n",
        "\n",
        "print(\"Number of blank spaces:\", count)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PmhE6D9BLXZY",
        "outputId": "7200f429-6e5a-4543-8905-c42042ee7e40"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a sentence: k a r t h i c k\n",
            "Number of blank spaces: 7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Write a program to Reversing a String without using reverse()- Try doing this with looops\n",
        "t = input(\"Enter a string: \")\n",
        "rt = \"\"\n",
        "for i in range(len(t) - 1, -1, -1):\n",
        "    rt += t[i]\n",
        "print(\"Reversed string:\", rt)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sz7iNWKnNDSt",
        "outputId": "2cd13aab-4c25-4fc8-bdcb-6ba99c548703"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a string: 12345\n",
            "Reversed string: 54321\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Write a program to count no. of vowels and print all the vowels.\n",
        "s = input(\"Enter a sentence: \")\n",
        "l = \"aeiouAEIOU\"\n",
        "c = 0\n",
        "list = []\n",
        "for i in s:\n",
        "    if i in l:\n",
        "        c += 1\n",
        "        list.append(i)\n",
        "print(\"Total number of vowels:\", c)\n",
        "print(\"Vowels found:\", \" \".join(list))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KCH1mTDILUTa",
        "outputId": "26c7b426-b2b9-4c6d-a007-a31b98f6dddb"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a sentence: AEIOU\n",
            "Total number of vowels: 5\n",
            "Vowels found: A E I O U\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "56XoHAhU5RdJ"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from io import UnsupportedOperation\n",
        "l = []\n",
        "p = 'abcba'\n",
        "z = len(p)\n",
        "for i in range(z,0,-1):\n",
        "  if p[i] != p[z-i]:\n",
        "    pass\n",
        "  else:\n",
        "    print('palindrome')\n",
        "\n",
        "Pass: keep executing the next statements\n",
        "Continue: it will skip the next executiable statements and goes back to the start of the loop top increment the index used\n",
        "Break: It breaks the loop and comes out to execute statements after the loop"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "QX3eBWDUXRDp",
        "outputId": "6a5d55f8-9c11-4d30-e3b1-628707ee49a5"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (ipython-input-2127021951.py, line 11)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-2127021951.py\"\u001b[0;36m, line \u001b[0;32m11\u001b[0m\n\u001b[0;31m    Pass: keep executing the next statements\u001b[0m\n\u001b[0m               ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "p = 'madam'\n",
        "z = len(p)\n",
        "is_palindrome = True\n",
        "for i in range(z // 2):\n",
        "    if p[i] != p[z - i - 1]:\n",
        "        is_palindrome = False\n",
        "        pass\n",
        "if is_palindrome:\n",
        "    print(\"Palindrome\")\n",
        "else:\n",
        "    print(\"Not a palindrome\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UJOQMRmzSJ9O",
        "outputId": "68eeb5d7-d412-49ef-da8b-66941b330108"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Palindrome\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "p = \"My name is Rishabh\"\n",
        "p.count(' ')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dMvKNrbW5zF8",
        "outputId": "79ac0830-ffb4-43af-9b6e-70e6a1d4a616"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y= 0\n",
        "p = \"My name is Rishabh\"\n",
        "for x in p:\n",
        "  if x ==' ':\n",
        "    y+=1\n",
        "print(y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5munnS5O53-7",
        "outputId": "2383e9b7-c458-4fbf-dda3-404b2939051c"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr = [0,1,2,3,4,5,6,7,8,9]\n",
        "print(arr[-100:3])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "unkvbs4lNSEJ",
        "outputId": "06d423bd-7c72-4343-ac3c-787c59038185"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 1, 2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr = [0,1,2,3,4,5,6,7,8,9]\n",
        "print(arr[0:10:2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aAv3v4n4VDmN",
        "outputId": "dd90ecb2-c6b9-4199-8c05-7d6166df139b"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 2, 4, 6, 8]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr = [0,1,2,3,4,5,6,7,8,9]\n",
        "print(arr[-100:100])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5CF_kfcCU1Kj",
        "outputId": "87633fff-25d4-4966-df26-bb2267a8f689"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr = [-1,0,1,2,3,4,5,6,7,8,9]\n",
        "print(arr[::-len(arr)])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wozOJEh_P3Eq",
        "outputId": "a477bef0-cdc3-4bdd-a091-25ce86d7ca1c"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr = [-1,0,1,2,3,4,5,6,7,8,9]\n",
        "print(arr[::+len(arr)])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wK2ym5QyVrLR",
        "outputId": "1ca141dc-b358-4708-8196-a4fd4013c28c"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-1]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data Science Week 2 -> Data Structures - Lists, Tuples, Dictionary, Linked Lists"
      ],
      "metadata": {
        "id": "KWg8VLd-NTBM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "t = (2,3,4)\n",
        "print(hash(t))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ysuycAw_NSGy",
        "outputId": "bf25e97e-3573-4c73-c35f-e89e05a20a22"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-3165226637586315787\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t = [2,3,4]\n",
        "print(hash(t))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "tm4tngYVNSKN",
        "outputId": "0ae9124f-44f6-4385-c827-1e197ce51c3b"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "unhashable type: 'list'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1930703340.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhash\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: unhashable type: 'list'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = {1, 2, 3, (4, 5)}\n",
        "print(s)\n",
        "print(hash(1))\n",
        "print(hash((4,5)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gnbvf3YaWOaa",
        "outputId": "d80089f7-d12d-46d0-9129-067217de636a"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{3, 1, (4, 5), 2}\n",
            "1\n",
            "-1009709641759730766\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d = {1: \"apple\", 2: \"banana\", (3, 4): \"grapes\"}\n",
        "print(d)\n",
        "print(hash(1))\n",
        "print(hash('apple'))\n",
        "print(hash((2,3)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7f6DCH8WWN0g",
        "outputId": "5f887f76-0b08-4aa0-e466-d9b86c7a1d97"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1: 'apple', 2: 'banana', (3, 4): 'grapes'}\n",
            "1\n",
            "-6494906444897940169\n",
            "8409376899596376432\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "tQKNqNRfXX6I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "s = {1,2,a}\n",
        "print(s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "c2csqr3kNSOL",
        "outputId": "ed0477a7-0228-49a8-b0b9-0be2ab9bc002"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'a' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-2952330129.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'a' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = {1,2,\"a\"}\n",
        "print(s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Of2rbzGhXYj-",
        "outputId": "c8f67367-eb40-46cd-e38e-2faf408857db"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1, 2, 'a'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = set(t)\n",
        "s"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G6DhPAd7NSQ0",
        "outputId": "b3381ec8-972f-40ee-f9b6-a7fd1d2b0ad4"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{2, 3, 4}"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t = \"hello\"\n",
        "s = set(t)\n",
        "print(s)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ciyPPLeGXuz4",
        "outputId": "6801d93c-320a-4304-db8a-3a481ba66563"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'o', 'h', 'e', 'l'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t = \"hello\"\n",
        "s = set(t)\n",
        "print(s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yqxyN03pX4NV",
        "outputId": "5b0482a2-348f-4ed3-d38c-e4608c1fefc2"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'o', 'h', 'e', 'l'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t = \"hello\"\n",
        "l = list(t)\n",
        "print(l)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ABPo4k0wZDTP",
        "outputId": "6a32e233-e471-4101-e56a-31773d347220"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['h', 'e', 'l', 'l', 'o']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t = \"hello\"\n",
        "tp = tuple(t)\n",
        "print(tp)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NY1NUdS2ZDJu",
        "outputId": "aac46674-97a6-4863-ba57-274ae16f5731"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('h', 'e', 'l', 'l', 'o')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t = \"hello\"\n",
        "d = dict(enumerate(t))\n",
        "print(d)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "udGnplsDZC7I",
        "outputId": "575635de-a650-423e-8ab8-189b15b6301a"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{0: 'h', 1: 'e', 2: 'l', 3: 'l', 4: 'o'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s1 = {2,3,4}\n",
        "s1.add(5)\n",
        "s1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DPtxWSHlNSTu",
        "outputId": "9c6d3e1a-c641-4dc8-a589-ae1194e86477"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{2, 3, 4, 5}"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s1.add(6)\n",
        "s1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zhUVNYHeZsbi",
        "outputId": "d22b7bed-100c-422b-ef18-ad2e2ce0059f"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{2, 3, 4, 5, 6}"
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s1 = {2,3,4}\n",
        "s1.remove(4)\n",
        "s1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Blt-0O9sNSWq",
        "outputId": "1237f7b9-fe90-48db-948d-b21b19d2c74b"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{2, 3}"
            ]
          },
          "metadata": {},
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s1 = {2,3,4}\n",
        "s1.remove(6)\n",
        "s1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176
        },
        "id": "hHs-5nbVaR9S",
        "outputId": "52c9af7a-a6fd-4b2a-dde0-e086ed5bfd7f"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "6",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-2369277655.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0ms1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0ms1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0ms1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 6"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s1 = {2,3,4}\n",
        "s1.discard(4)\n",
        "s1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d78FvP3MNSZW",
        "outputId": "3faac92d-f07e-4147-8bf6-f3d106c21873"
      },
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{2, 3}"
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s1 = {2,3,4}\n",
        "s1.discard(10)\n",
        "s1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4a8a7d96-72f9-4dfa-ca23-50bea56e6fa4",
        "id": "BLP4zpsuaj3r"
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{2, 3, 4}"
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s1 = {2, 3}\n",
        "s1.update([4, 5, 6])\n",
        "print(s1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QI7d0LDUaieX",
        "outputId": "4a366567-b3c2-404b-8b35-e0910f89de99"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{2, 3, 4, 5, 6}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s1 = {1, 2}\n",
        "s2 = {2, 3, 4}\n",
        "s1.update(s2)\n",
        "print(s1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-vNWU2gjaiQq",
        "outputId": "600271f7-43c1-48c3-8244-564c248fec32"
      },
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1, 2, 3, 4}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s1 = {1, 2}\n",
        "s1.update(\"hi\")\n",
        "print(s1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RV1JEQGgaiDe",
        "outputId": "0ce1fd89-09f2-4cad-e45b-079481590ef4"
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1, 2, 'i', 'h'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r = s1.pop()\n",
        "r"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ab-fF-vPcmPY",
        "outputId": "ddd135a6-d001-4534-910a-ba07dc461ff7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " l1 = [1, 2, 3]\n",
        "print(l1)\n",
        "l1.append(4)\n",
        "print(l1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_jUrA6mAbwzE",
        "outputId": "2250a46d-44f5-4f66-9c86-f5d2419968b5"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3]\n",
            "[1, 2, 3, 4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l1.extend([5, 6])\n",
        "print(l1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sQbBbDqvbwmU",
        "outputId": "41578462-c0a9-469d-9bb2-680aa3add5dc"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 4, 5, 6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t1 = (1, 2, 3)\n",
        "print(t1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QDan081ObwZc",
        "outputId": "bceac2f5-348a-40e9-a3ce-5400c17bce05"
      },
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1, 2, 3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t1 = (1, 2, 3)\n",
        "temp = list(t1)\n",
        "temp.append(4)\n",
        "t1 = tuple(temp)\n",
        "print(t1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uVP0JflocVTM",
        "outputId": "7902135d-3cb0-47a7-b120-a78a432a8a47"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1, 2, 3, 4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d1 = {'a': 1, 'b': 2, 'c': 3}\n",
        "print(d1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gCc0St8tcU7R",
        "outputId": "5ea9014e-65a6-4134-dfcd-42d7c88654b0"
      },
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'a': 1, 'b': 2, 'c': 3}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d1['d'] = 4\n",
        "print(d1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oaNjwpckcibK",
        "outputId": "d046453c-934b-4169-9792-e9ece623f42d"
      },
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'a': 1, 'b': 2, 'c': 3, 'd': 4}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d1.pop('b')\n",
        "print(d1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9it051oxciQh",
        "outputId": "6a7ba823-06ab-432f-e302-673848e13686"
      },
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'a': 1, 'c': 3, 'd': 4}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "del d1['c']\n",
        "print(d1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QfivVvmkciDW",
        "outputId": "b6248577-c3b8-46bb-8943-342fa83fe264"
      },
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'a': 1, 'd': 4}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d1.update({'e': 5, 'a': 10})\n",
        "print(d1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "njW974YQcUz1",
        "outputId": "059a5666-035c-44f6-9b4b-1f53005930ac"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'a': 10, 'd': 4, 'e': 5}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t1 = (1, 2, 3)\n",
        "print(t1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gGjvolORbvvg",
        "outputId": "40e2718f-eab6-4b80-88e7-69564c2a7797"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1, 2, 3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s2 = s | s1\n",
        "s2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UF6LNl3actUB",
        "outputId": "a1f20636-0aaa-45c9-e077-ae11cc9319dc"
      },
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{1, 2, 'e', 'h', 'i', 'l', 'o'}"
            ]
          },
          "metadata": {},
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = {1, 2, 3}\n",
        "s1 = {3, 4, 5}\n",
        "s2 = s | s1\n",
        "print(s2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SWr10TIwc8yx",
        "outputId": "c1011ef5-900b-423e-a666-5d6c7ed80c76"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1, 2, 3, 4, 5}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s3 = {6,7,8,9,2,1}\n",
        "print(s2 & s3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0UDSbdP6ctXv",
        "outputId": "7c6f8e26-61d6-4616-8767-583f787cb0a6"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1, 2}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(s2.intersection(s3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ql1jhyLidW0v",
        "outputId": "bafdc799-56dc-4ef0-f7e1-b301cf662739"
      },
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1, 2}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s4 = {4,5,6,7,8,9}\n",
        "print(s3-s4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xDgpSBsVctZm",
        "outputId": "08c7dc02-0e04-41e0-b774-85aacec2c5ba"
      },
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1, 2}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(s3.difference(s4))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZQ0RDp7UdzqG",
        "outputId": "d9b2402c-b0a9-4b12-b704-644082a99c9d"
      },
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1, 2}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(s4-s3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Z2jwNoTdT30",
        "outputId": "6faab6d9-a6b9-4dfa-85da-bc2050de1a97"
      },
      "execution_count": 133,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{4, 5}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = s3 ^ s4   ## Symmetric difference\n",
        "s"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bMMeAWVGdYTB",
        "outputId": "a21cf355-ce6c-49b8-8e94-b1c6003d7171"
      },
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{1, 2, 4, 5}"
            ]
          },
          "metadata": {},
          "execution_count": 135
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s.clear()\n",
        "s"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ra2U2H92d7C4",
        "outputId": "93eb3eaf-170d-4abe-e6d7-a884a5a5caef"
      },
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "set()"
            ]
          },
          "metadata": {},
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = {1,2,4}\n",
        "r = s.pop()\n",
        "r"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zVvTU2eCeGAU",
        "outputId": "54ea2558-9835-4f95-b8ee-0993f618e182"
      },
      "execution_count": 139,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 139
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = {1, 2, 4}\n",
        "r = s.pop()\n",
        "print(\"Popped:\", r)\n",
        "print(\"Remaining set:\", s)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BWuiyjJnefXP",
        "outputId": "49848632-e602-4317-fc48-ca5facd8546f"
      },
      "execution_count": 144,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Popped: 1\n",
            "Remaining set: {2, 4}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = {1,2,4}\n",
        "print(s.pop())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xaa-GInweGC4",
        "outputId": "c6dba186-2664-4b37-bc45-ad45089d701a"
      },
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t = (1, 1, 1, 2, 3)\n",
        "print(t.count(1))\n",
        "print(t.count(2))\n",
        "print(t.count(5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dgsguUi2fRwz",
        "outputId": "4bc6b1da-d027-4cca-91ce-54a0a8ca16a9"
      },
      "execution_count": 145,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n",
            "1\n",
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Tuple\n",
        "t = (1,2,3,4, 3)\n",
        "print(t.count(3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8dgbzIWAeGF2",
        "outputId": "aa9b5fc2-97c9-4d6a-e733-5495a0f396ed"
      },
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t.index(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        },
        "id": "1osEFX1aeGIh",
        "outputId": "b221434f-1b29-42bc-e513-39bebee2c5bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "tuple.index(x): x not in tuple",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-3776763145.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m: tuple.index(x): x not in tuple"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t = (1, 2, 3, 4, 3)\n",
        "print(min(t))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NEl1na-KfZVL",
        "outputId": "28862482-9de4-4c90-d241-94af084db5e1"
      },
      "execution_count": 146,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(min(t))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xx3J8WT6eGLd",
        "outputId": "ce2440da-15f0-460c-8d1a-44e3c2ac125d"
      },
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t1 = (1,2,3,(3,4),(5,6,7))\n",
        "t1[4][2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bC4zSV2ceGNy",
        "outputId": "1d1627fb-a345-45f3-e7f6-a2d040880c59"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l = [1,2,4]\n",
        "l.append(5)\n",
        "l"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yeSItB84eGQf",
        "outputId": "02657eba-0962-45db-d50a-32e66a515f39"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 2, 4, 5]"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l = [1, 2, 4]\n",
        "l.extend([5,6,7])\n",
        "l"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cV4jfmoqgFvI",
        "outputId": "86445c74-9033-4df4-d883-6443fa28ee13"
      },
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 2, 4, 5, 6, 7]"
            ]
          },
          "metadata": {},
          "execution_count": 152
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l.append([5,6,7])\n",
        "l"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "erKOGRGxgN0A",
        "outputId": "998cec7a-d45e-414f-9b47-55a9c370e4a7"
      },
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 2, 4, 5, 6, 7, [5, 6, 7]]"
            ]
          },
          "metadata": {},
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Dictionary\n",
        "\n",
        "d = dict(name = 'Alice', age = 25, city = 'Delhi')\n",
        "d"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4u-5H0tJgiRT",
        "outputId": "2792e9bf-fb4f-448c-8782-8d07791daedc"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'name': 'Alice', 'age': 25, 'city': 'Delhi'}"
            ]
          },
          "metadata": {},
          "execution_count": 154
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d = {'name': 'Alice', 'age': 25, 'city': 'Delhi'}\n",
        "d"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p3AOnZ0EgiUD",
        "outputId": "70e19270-94f8-4d2d-fc47-26c73ac4b1af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'name': 'Alice', 'age': 25, 'city': 'Delhi'}"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d.clear()\n",
        "d"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rlHnRbxegiWd",
        "outputId": "be68f776-fe4b-47ee-ba6a-a64c7389920f"
      },
      "execution_count": 156,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{}"
            ]
          },
          "metadata": {},
          "execution_count": 156
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d1 = d.copy()\n",
        "d1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bVr3o8wPgiZW",
        "outputId": "c891eacb-295a-47e1-f58f-d648f31a4c0e"
      },
      "execution_count": 157,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{}"
            ]
          },
          "metadata": {},
          "execution_count": 157
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d = dict(name='Alice', age=25, city='Delhi')\n",
        "d1 = d.copy()\n",
        "print(d1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XoqOo6rIgjza",
        "outputId": "ebabc67b-6182-42d4-f30c-e84528378698"
      },
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'name': 'Alice', 'age': 25, 'city': 'Delhi'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(d.get('name'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cYvbizBcgicT",
        "outputId": "d2ba131f-f886-448e-914e-f65cf1bb4831"
      },
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Alice\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(d.get('city'))\n",
        "print(d.get('country'))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5409syNvgrG7",
        "outputId": "0e0cc120-cc0f-4cd2-9c71-1bd6dd7b9a19"
      },
      "execution_count": 160,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Delhi\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d1.items()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LjuyQ14lgiex",
        "outputId": "4fa93253-8f37-4360-fcd6-f8a6a8592556"
      },
      "execution_count": 162,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_items([('name', 'Alice'), ('age', 25), ('city', 'Delhi')])"
            ]
          },
          "metadata": {},
          "execution_count": 162
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d1.values()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rNkr0dtugihg",
        "outputId": "ae2f77b7-4741-4cdd-c3a3-ab572e92e99d"
      },
      "execution_count": 164,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_values(['Alice', 25, 'Delhi'])"
            ]
          },
          "metadata": {},
          "execution_count": 164
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d1.keys()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZJ1SOjZegikd",
        "outputId": "d89e78cd-38da-4097-bb15-4584215c45f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_keys(['name', 'age', 'city'])"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d.pop('age')\n",
        "d"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C3aTKnEZgiop",
        "outputId": "7d310d68-935e-4545-9c4e-a41069f59462"
      },
      "execution_count": 165,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'name': 'Alice', 'city': 'Delhi'}"
            ]
          },
          "metadata": {},
          "execution_count": 165
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "n = {\n",
        "     'person1' : {'name': 'Alice', 'age': 25, 'city': 'Delhi', 'income':{'basic':2000, 'allowance':1000, 'bonus':'500'}},\n",
        "     'person2' : {'name': 'Alice', 'age': 25, 'city': 'Delhi', 'income':{'basic':2000, 'allowance':1000, 'bonus':'500'}}\n",
        "     }\n",
        "print(n)\n"
      ],
      "metadata": {
        "id": "za53Elbhhycr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f8474588-52a9-4984-f5aa-10eab34cdb56"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'person1': {'name': 'Alice', 'age': 25, 'city': 'Delhi', 'income': {'basic': 2000, 'allowance': 1000, 'bonus': '500'}}, 'person2': {'name': 'Alice', 'age': 25, 'city': 'Delhi', 'income': {'basic': 2000, 'allowance': 1000, 'bonus': '500'}}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(n)\n",
        "print(n['person1']['name'])\n",
        "print(n['person2']['city'])\n",
        "print(n['person1']['income']['bonus'])\n",
        "print(n['person2']['income']['basic'])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xm9Tg5Z3iMvd",
        "outputId": "106868b9-124a-4629-9b7d-da330e0787e2"
      },
      "execution_count": 176,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'person1': {'name': 'Alice', 'age': 25, 'city': 'Delhi', 'income': {'basic': 2000, 'allowance': 1000, 'bonus': '500'}}, 'person2': {'name': 'Alice', 'age': 25, 'city': 'Delhi', 'income': {'basic': 2000, 'allowance': 1000, 'bonus': '500'}}}\n",
            "Alice\n",
            "Delhi\n",
            "500\n",
            "2000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d = {'name': 'Alice', 'age': 25, 'city': 'Delhi'}\n",
        "for i, j in d.items():\n",
        "  print(f'{i}:{j}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8y2Q_4NWirnF",
        "outputId": "e45e5240-fb85-4b1f-ad1b-6f22d6a62562"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "name:Alice\n",
            "age:25\n",
            "city:Delhi\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d1 = {'country': 'India', 'age': 26}\n",
        "d.update(d1)\n",
        "print(d)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xNZI7uLMjENO",
        "outputId": "e3c16892-b91a-48e6-b394-bb686a8109d1"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'name': 'Alice', 'age': 26, 'city': 'Delhi', 'country': 'India'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d = {'name': 'Alice', 'age': 25, 'city': 'Delhi'}\n",
        "n = {\n",
        "    'person1': {'name': 'Alice', 'age': 25, 'city': 'Delhi',\n",
        "                'income': {'basic': 2000, 'allowance': 1000, 'bonus': '500'}},\n",
        "    'person2': {'name': 'Alice', 'age': 25, 'city': 'Delhi',\n",
        "                'income': {'basic': 2000, 'allowance': 1000, 'bonus': '500'}}\n",
        "}\n",
        "\n",
        "m = d | n\n",
        "print(m)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Un-zZ6PkjEO-",
        "outputId": "2eb51a68-bc50-4c7d-d767-0f33c0e4c95a"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'name': 'Alice', 'age': 25, 'city': 'Delhi', 'person1': {'name': 'Alice', 'age': 25, 'city': 'Delhi', 'income': {'basic': 2000, 'allowance': 1000, 'bonus': '500'}}, 'person2': {'name': 'Alice', 'age': 25, 'city': 'Delhi', 'income': {'basic': 2000, 'allowance': 1000, 'bonus': '500'}}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "d.update(n)\n",
        "d"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i156tHcgkA6A",
        "outputId": "649afdf6-61a4-43b5-a393-8b4980de99e3"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'name': 'Alice',\n",
              " 'age': 25,\n",
              " 'city': 'Delhi',\n",
              " 'person1': {'name': 'Alice',\n",
              "  'age': 25,\n",
              "  'city': 'Delhi',\n",
              "  'income': {'basic': 2000, 'allowance': 1000, 'bonus': '500'}},\n",
              " 'person2': {'name': 'Alice',\n",
              "  'age': 25,\n",
              "  'city': 'Delhi',\n",
              "  'income': {'basic': 2000, 'allowance': 1000, 'bonus': '500'}}}"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "head = None\n",
        "class Node:\n",
        "\n",
        "  def __init__(self, data = None):\n",
        "    self.data = data\n",
        "    self.next = None\n",
        "\n",
        "  def insert_at_beginning(self, data):\n",
        "    new_node = Node(data)\n",
        "\n",
        "    if not self.head:\n",
        "      self.head = new_node\n",
        "      return\n",
        "    new_node.next = self.head\n",
        "    self.head = new_node\n",
        "\n",
        "  def insert_at_end(self, data):\n",
        "    new_node = Node(data)\n",
        "    if not self.head:\n",
        "      self.head = new_node\n",
        "      return\n",
        "      current = self.head\n",
        "      while current.next :\n",
        "        current = current.next\n",
        "\n",
        "      current.next = new_node\n",
        "\n",
        "  def delete(self, key ):\n",
        "    current = self.head\n",
        "    previous = None\n",
        "\n",
        "    ## if head needs to be deleted\n",
        "\n",
        "    if current and current.data == key:\n",
        "      self.head = current.next\n",
        "      return\n",
        "\n",
        "    while current and current.data != key :\n",
        "      previous = current\n",
        "      current = current.next\n",
        "\n",
        "    if not current:\n",
        "      print(\"Not found\")\n",
        "      return\n",
        "    previous.next = current.next\n",
        "\n"
      ],
      "metadata": {
        "id": "YxRrlTC9kJG_"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Home Work 1:\n",
        "\n",
        "Circular Linked Linked - Insertion, Deletion"
      ],
      "metadata": {
        "id": "k7qkh8QW0CW5"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "PbSmEYR40Ymm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q1 : Description\n",
        "Sometimes the data has few duplicate values which will affect the analysis done. In this problem, you will be given a list. You have to find and delete the duplicates and print the updated list with no duplicates.\n",
        "\n",
        "----------------------------------------------------------------------\n",
        "Input:\n",
        "A list of integers.\n",
        "\n",
        "Output:\n",
        "A list of integers, with duplicates removed if any.\n",
        "\n",
        "----------------------------------------------------------------------\n",
        "Sample input:\n",
        "[8, 9, 2, 2, 3, 4, 5, 2]\n",
        "\n",
        "Sample output:\n",
        "[8, 9, 2, 3, 4, 5]\n",
        "\n",
        "----------------------------------------------------------------------\n",
        "Sample input:\n",
        "[4, 4, 4, 4]\n",
        "\n",
        "Sample output:\n",
        "[4]\n",
        "\n",
        "----------------------------------------------------------------------\n",
        "Note the order of the data did not change in input and output."
      ],
      "metadata": {
        "id": "LYKg6Q500f5q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nums = [int(x) for x in input(\"Enter numbers separated by space: \").split()]\n",
        "unique = []\n",
        "for n in nums:\n",
        "    if n not in unique:\n",
        "        unique.append(n)\n",
        "print(\"List after removing duplicates:\", unique)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NZ0qWH3C3oky",
        "outputId": "2ddcde99-172d-4f39-cab8-9fee51343e8e"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter numbers separated by space: 4 4 4 4\n",
            "List after removing duplicates: [4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nums = [int(x) for x in input(\"Enter numbers separated by space: \").split()]\n",
        "unique = []\n",
        "for n in nums:\n",
        "    if n not in unique:\n",
        "        unique.append(n)\n",
        "print(\"List after removing duplicates:\", unique)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wp9xOLEn3oKP",
        "outputId": "b0b3c421-f156-4715-90ed-1d32542c283c"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter numbers separated by space: 8 9 2 2 3 4 5 2\n",
            "List after removing duplicates: [8, 9, 2, 3, 4, 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "uv7GmtEF0Ypr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q2 : You will be converting a dictionary, of string(keys) and list of string (values),  to a list of strings. Please check the sample input/output for clarification.\n",
        "\n",
        "\n",
        "Input:\n",
        "A dictionary with keys as strings and values as a list of strings.\n",
        "\n",
        "Output:\n",
        "A list of strings\n",
        "\n",
        "\n",
        "Sample input:\n",
        "{‘Mobile’: [‘Redmi’, ‘Samsung’, ‘Realme’],\n",
        "‘Laptop’: [‘Dell’, ‘HP’],\n",
        "‘TV’: [‘Videocon’, ‘Sony’] }\n",
        "\n",
        "Sample output:\n",
        "[‘Mobile_Redmi’, ‘Mobile_Samsung’, ‘Mobile_Realme’, ‘Laptop_Dell’, ‘Laptop_HP’, ‘TV_Videocon’, ‘TV_Sony’]\n",
        "\n",
        "\n",
        "Sample input:\n",
        "{ 'Pen': ['Gel', 'Ink', 'ball'],\n",
        "'Mobile': ['Android', 'apple'] }\n",
        "\n",
        "Sample output:\n",
        "['Pen_Gel', 'Pen_Ink', 'Pen_ball', 'Mobile_Android', 'Mobile_apple']"
      ],
      "metadata": {
        "id": "JC7-pu7Q0npt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = {'Mobile': ['Redmi', 'Samsung', 'Realme'],'Laptop': ['Dell', 'HP'],'TV': ['Videocon', 'Sony']}\n",
        "result = []\n",
        "for key, values in data.items():\n",
        "    for val in values:\n",
        "        result.append(f'{key}_{val}')\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W1dDyuRJ6syf",
        "outputId": "fe3520cc-a173-457d-980a-0c3ea52c57cf"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Mobile_Redmi', 'Mobile_Samsung', 'Mobile_Realme', 'Laptop_Dell', 'Laptop_HP', 'TV_Videocon', 'TV_Sony']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = { 'Pen': ['Gel', 'Ink', 'ball'], 'Mobile': ['Android', 'apple'] }\n",
        "result = []\n",
        "# Loop through dictionary\n",
        "for key, values in data.items():\n",
        "    for val in values:\n",
        "        result.append(f'{key}_{val}')\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9_O1EMve6sqX",
        "outputId": "4b7a0a21-20ba-4453-811b-85df13c8e2cb"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Pen_Gel', 'Pen_Ink', 'Pen_ball', 'Mobile_Android', 'Mobile_apple']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "v1dFniD-0qN4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q3 : Description\n",
        "You will be given a string with a lot of brackets. You have to print if the brackets are balanced or not. Remember, there are three types of brackets: ‘( )’,  ‘{ }’ and ‘[ ]’.\n",
        "\n",
        "----------------------------------------------------------------------\n",
        "Input:\n",
        "A string\n",
        "\n",
        "Output:\n",
        "Yes, if the brackets are balanced.\n",
        "No otherwise."
      ],
      "metadata": {
        "id": "6cmjh-0f0q79"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "s = input(\"Enter a string with brackets: \")\n",
        "while '()' in s or '{}' in s or '[]' in s:\n",
        "    s = s.replace('()', '').replace('{}', '').replace('[]', '')\n",
        "if len(s) == 0:\n",
        "    print(\"Yes\")\n",
        "else:\n",
        "    print(\"No\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1E7M0gxw7700",
        "outputId": "abb0a11f-62e7-4d50-c42f-44b4d34729e6"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a string with brackets: {[()]}\n",
            "Yes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = input(\"Enter a string with brackets: \")\n",
        "while '()' in s or '{}' in s or '[]' in s:\n",
        "    s = s.replace('()', '').replace('{}', '').replace('[]', '')\n",
        "if len(s) == 0:\n",
        "    print(\"Yes\")\n",
        "else:\n",
        "    print(\"No\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WAeiSOjY-z3k",
        "outputId": "e6911896-d93c-4952-e74a-e722283454a3"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a string with brackets: {[(])}\n",
            "No\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = '{{{[[[[]]]}(())'\n",
        "s2 = '{{{{[[[[((()))]]]]}}}}'\n",
        "\n",
        "l = []\n",
        "for i in s:\n",
        "  if len(l) == 0 or i =='[' or i =='{' or i =='(' :\n",
        "    l.append(i)\n",
        "  else:\n",
        "    l.pop()\n",
        "\n",
        "if len(l) == 0:\n",
        "  print ('Balanced')\n",
        "else:\n",
        "  print('Not Balanaced')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cBxxJBD60zY1",
        "outputId": "7cc11681-f4b3-43dc-9a21-814ae0961ba7"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Not Balanaced\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = '{{{[[[[]]]}(())'\n",
        "\n",
        "l = []\n",
        "pairs = {')': '(', '}': '{', ']': '['}\n",
        "\n",
        "for i in s:\n",
        "    if i in '([{':\n",
        "        l.append(i)\n",
        "    elif i in ')]}':\n",
        "        if not l or l[-1] != pairs[i]:\n",
        "            print('Not Balanced')\n",
        "            break\n",
        "        l.pop()\n",
        "else:\n",
        "    if len(l) == 0:\n",
        "        print('Balanced')\n",
        "    else:\n",
        "        print('Not Balanced')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g9URfSCn822G",
        "outputId": "51c86954-2cd3-4693-86f3-7fd5fb643c67"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Not Balanced\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = '{{{{[[[[((()))]]]]}}}}'\n",
        "\n",
        "l = []\n",
        "pairs = {')': '(', '}': '{', ']': '['}\n",
        "\n",
        "for i in s:\n",
        "    if i in '([{':\n",
        "        l.append(i)\n",
        "    elif i in ')]}':\n",
        "        if not l or l[-1] != pairs[i]:\n",
        "            print('Not Balanced')\n",
        "            break\n",
        "        l.pop()\n",
        "else:  # runs\n",
        "    if len(l) == 0:\n",
        "        print('Balanced')\n",
        "    else:\n",
        "        print('Not Balanced')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lEs0dnU184Wu",
        "outputId": "8a9defd7-4ba0-4d3e-c2b4-60e74db07813"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Balanced\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q4 You will be given a dictionary with keys as items and values as their prices. You have to print the cheapest item.\n",
        "\n",
        "----------------------------------------------------------------------\n",
        "Sample input:\n",
        "A single line non-empty dictionary\n",
        "\n",
        "Sample output:\n",
        "cheapest_item name: cheapest_item_cost\n",
        "\n",
        "----------------------------------------------------------------------\n",
        "Sample input:\n",
        "{'mobile1':10000, 'mobile2':11000, 'mobile3':13000, 'mobile4':9000, 'mobile5':15000, 'mobile6':16000, 'mobile7':17000, 'mobile8':18000, 'mobile9':19000}\n",
        "\n",
        "Sample output:\n",
        "mobile4: 9000\n",
        "\n",
        "Note: in case of a tie, whichever item came first should be the output."
      ],
      "metadata": {
        "id": "yu2OoV2N04Ib"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "7N_jBzAi-8aV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## Find min value\n",
        "d = {'mobile1':10000, 'mobile2':11000, 'mobile3':13000, 'mobile4':9000, 'mobile5':15000, 'mobile6':16000, 'mobile7':17000, 'mobile8':18000, 'mobile9':19000}\n",
        "l = list(d.keys())[0]\n",
        "min = d[l]\n",
        "min_key = l\n",
        "\n",
        "##traverse all items and compare the min value\n",
        "\n",
        "for key, value in d.items():\n",
        "  if value < min:\n",
        "    min = value\n",
        "    min_key = key\n",
        "\n",
        "print(min_key + \":\" + str(min))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6j_eBEud0-Lo",
        "outputId": "a39b7b42-e28f-4125-8edc-264c407d740d"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mobile4:9000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q5 You will be given a list of repeated elements. You have to find the maximum distance between two same elements. The answer will be zero if there are no repeated elements.\n",
        "\n",
        "----------------------------------------------------------------------\n",
        "Input:\n",
        "A non-empty list of integers.\n",
        "\n",
        "Output:\n",
        "A single integer denoting the maximum distance between two same integers.\n",
        "\n",
        "----------------------------------------------------------------------\n",
        "Sample input:\n",
        "[1, 2, 3, 2, 5, 1, 2, 4, 6, 2, 7, 8, 6]\n",
        "\n",
        "Sample output:\n",
        "8\n",
        "\n",
        "Explanation:\n",
        "Max distance for 1: 5\n",
        "Max distance for 2: 8\n",
        "Max distance for 3: 0\n",
        "Max distance for 4: 0\n",
        "Max distance for 5: 0\n",
        "Max distance for 6: 4\n",
        "Max distance for 7: 0\n",
        "Max distance for 8: 0\n"
      ],
      "metadata": {
        "id": "jECCZ7gg0-V1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nums = [int(x) for x in input(\"Enter numbers separated by commas: \").split(',')]\n",
        "max_distance = 0\n",
        "for n in set(nums):\n",
        "    first_index = nums.index(n)\n",
        "    last_index = len(nums) - 1 - nums[::-1].index(n)\n",
        "    distance = last_index - first_index\n",
        "    max_distance = max(max_distance, distance)\n",
        "print(max_distance)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BX3seMII_2MR",
        "outputId": "0368e89a-565e-4c6a-e826-4259e3a3bf68"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter numbers separated by commas: 1,2,3,2,5,1,2,4,6,2,7,8,6\n",
            "8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Find the index of every emement\n",
        "min_index = {}\n",
        "l =  [1, 2, 3, 2, 5, 1, 2, 4, 6, 2, 7, 8, 6]\n",
        "max_d = 0\n",
        "for i in range(len(l)):\n",
        "  for j in range(len(l)-1,0 , -1):\n",
        "    if l[i] == l[j]:\n",
        "      max_d = max(max_d, j-i)\n",
        "print(max_d)\n",
        "\n",
        "### Store the index of same elements together such that you can find the differenences from the 1st index"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_97Gtln61GN1",
        "outputId": "c5434f2e-b441-4dae-89db-8771f94683da"
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DxEmobRVKfkR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q6 Your team is going for camping and you are taking a vote to decide what food to pack for dinner.\n",
        "Everyone gets a vote and the food item that gets at least one more than half of the votes wins. None of the items wins if nothing gets at least one more than half votes. Assume that every person gets only one vote.\n",
        "The input will contain a list of food items where each occurrence of an item represents one vote. You should print the winning food item as output. If there is no clear winner, print \"NOTA\".\n",
        "\n",
        "Sample Input:\n",
        "[\"pasta\",\"pasta\",\"pasta\",\"pasta\",\"pasta\",\"paratha\",\"paratha\",\"paratha\"]\n",
        "Sample Output:\n",
        "pasta"
      ],
      "metadata": {
        "id": "LBiFqTHG1GnR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "l = [\"pasta\",\"pasta\",\"pasta\",\"pasta\",\"pasta\",\"paratha\",\"paratha\",\"paratha\"]\n",
        "l1 = [\"biryani\", \"biryani\", \"pasta\", \"pasta\"]\n",
        "d = {}\n",
        "\n",
        "vote_half = len(l1)//2\n",
        "\n",
        "for i in l1:\n",
        "  if i in d:\n",
        "    d[i]+=1\n",
        "  else:\n",
        "    d[i] = 1\n",
        "f = 0\n",
        "for key, value in d.items():\n",
        "  if value > vote_half:\n",
        "    print(key)\n",
        "  else:\n",
        "    print('NOTA')\n",
        "    break\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c96C4svq1JcT",
        "outputId": "fab9e66f-2fd2-4206-de4f-fb29dbed8b4b"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "NOTA\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l1 = [\"biryani\", \"biryani\", \"pasta\", \"pasta\"]\n",
        "d = {}\n",
        "for i in l1:\n",
        "    d[i] = d.get(i, 0) + 1\n",
        "vote_half = len(l1) // 2\n",
        "winner_found = False\n",
        "for key, value in d.items():\n",
        "    if value > vote_half:\n",
        "        print(key)\n",
        "        winner_found = True\n",
        "        break\n",
        "if not winner_found:\n",
        "    print(\"NOTA\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uUL-l2q3MUB_",
        "outputId": "52575b83-94c6-4b2f-8bc7-256d0935c0e1"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "NOTA\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l1 = [\"biryani\", \"biryani\", \"pasta\", \"pasta\",\"biryani\",]\n",
        "d = {}\n",
        "for i in l1:\n",
        "    d[i] = d.get(i, 0) + 1\n",
        "vote_half = len(l1) // 2\n",
        "winner_found = False\n",
        "for key, value in d.items():\n",
        "    if value > vote_half:\n",
        "        print(key)\n",
        "        winner_found = True\n",
        "        break\n",
        "if not winner_found:\n",
        "    print(\"NOTA\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_B8w6Fn4MwNz",
        "outputId": "15d1d6e1-5af2-4542-db0d-c3115e06326d"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "biryani\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l1 = [\"biryani\", \"biryani\", \"pasta\", \"pasta\",\"pasta\",]\n",
        "d = {}\n",
        "for i in l1:\n",
        "    d[i] = d.get(i, 0) + 1\n",
        "vote_half = len(l1) // 2\n",
        "winner_found = False\n",
        "for key, value in d.items():\n",
        "    if value > vote_half:\n",
        "        print(key)\n",
        "        winner_found = True\n",
        "        break\n",
        "if not winner_found:\n",
        "    print(\"NOTA\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8XcvZ9NSM6Nx",
        "outputId": "83fe3451-f783-418c-d411-eb4211e2dd5a"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "pasta\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "votes = input(\"Enter the list of food items (space-separated): \").split()\n",
        "d = {}\n",
        "for item in votes:\n",
        "    d[item] = d.get(item, 0) + 1\n",
        "vote_half = len(votes) // 2\n",
        "winner_found = False\n",
        "for food, count in d.items():\n",
        "    if count > vote_half:\n",
        "        print(food)\n",
        "        winner_found = True\n",
        "        break\n",
        "if not winner_found:\n",
        "    print(\"NOTA\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tq3VwKPLNERk",
        "outputId": "92cf4d25-69ea-4860-c116-33da2c761deb"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the list of food items (space-separated): pasta pasta bri bri\n",
            "NOTA\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q7 Consider a nested dictionary as follows:\n",
        "\n",
        "{'Fruit': 1, 'Vegetable': {'Cabbage': 2, 'Cauliflower': 3}, 'Spices': 4}\n",
        "\n",
        "Your task is to flatten a nested dictionary and join the nested keys with the \"_\" character. For the above dictionary, the flattened dictionary would be as follows:\n",
        "\n",
        "{'Fruit': 1, 'Vegetable_Cabbage': 2, 'Vegetable_Cauliflower': 3, 'Spices': 4}\n",
        "\n",
        "\n",
        "\n",
        "The input will have a nested dictionary.\n",
        "\n",
        "The output should have two lists. The first list will have keys and the second list should have values. Both lists should be sorted."
      ],
      "metadata": {
        "id": "9KozS1ub1Jzv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### flatten teh dictionary\n",
        "## parent_dic + '_' + value\n",
        "d = {'Fruit': 1, 'Vegetable': {'Cabbage': 2, 'Cauliflower': 3}, 'Spices': 4}\n",
        "flat ={}\n",
        "\n",
        "for key, value in d.items():\n",
        "  if isinstance(value, dict):\n",
        "    for k, v in value.items():\n",
        "      flat[key +'_'+ k] = v\n",
        "  else:\n",
        "    flat[key] = value\n",
        "\n",
        "### Sort the dictionary\n",
        "keys = sorted(flat.keys())\n",
        "values = [flat[k] for k in keys]\n",
        "\n",
        "keys"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SENbpGlx1Nrp",
        "outputId": "33e816b9-44c1-403b-c838-3d9d9418fe55"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Fruit', 'Spices', 'Vegetable_Cabbage', 'Vegetable_Cauliflower']"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def flatten_dict(nested_dict):\n",
        "    flat_dict = {}\n",
        "    for key, value in nested_dict.items():\n",
        "        if isinstance(value, dict):\n",
        "            for k, v in value.items():\n",
        "                flat_dict[key + '_' + k] = v\n",
        "        else:\n",
        "            flat_dict[key] = value\n",
        "    return flat_dict\n",
        "\n",
        "d = {'Fruit': 1, 'Vegetable': {'Cabbage': 2, 'Cauliflower': 3}, 'Spices': 4}\n",
        "flat = flatten_dict(d)\n",
        "keys = sorted(flat.keys())\n",
        "values = [flat[k] for k in keys]\n",
        "\n",
        "print(\"Flattened Dictionary:\", flat)\n",
        "print(\"Sorted Keys:\", keys)\n",
        "print(\"Sorted Values:\", values)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TGxbN4J8PIoj",
        "outputId": "7f19c7c7-efe3-4b55-8b59-3c3402f7ffd6"
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Flattened Dictionary: {'Fruit': 1, 'Vegetable_Cabbage': 2, 'Vegetable_Cauliflower': 3, 'Spices': 4}\n",
            "Sorted Keys: ['Fruit', 'Spices', 'Vegetable_Cabbage', 'Vegetable_Cauliflower']\n",
            "Sorted Values: [1, 4, 2, 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q 8 In the binary search, you kept reducing the search space into half of the previous search space. In this question, can you similarly reduce the search space in one-third of the last space search and write a searching algorithm?\n",
        "\n",
        "----------------------------------------------------------------------\n",
        "Input:\n",
        "A non-empty sorted list of unique integers in line one\n",
        "The integer key to be found in line two\n",
        "\n",
        "Output:\n",
        "Index of the element key if it is present in the list, else -1\n",
        "\n",
        "----------------------------------------------------------------------\n",
        "Sample input:\n",
        "[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]\n",
        "17\n",
        "\n",
        "Sample output:\n",
        "7\n",
        "\n",
        "----------------------------------------------------------------------\n",
        "Sample input:\n",
        "[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]\n",
        "1\n",
        "\n",
        "\n",
        "Sample output:\n",
        "-1\n"
      ],
      "metadata": {
        "id": "SRrVRoYz1OEq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def ternary_search(arr, key):\n",
        "    left, right = 0, len(arr) - 1\n",
        "    while left <= right:\n",
        "        mid1 = left + (right - left) // 3\n",
        "        mid2 = right - (right - left) // 3\n",
        "\n",
        "        if arr[mid1] == key:\n",
        "            return mid1\n",
        "        if arr[mid2] == key:\n",
        "            return mid2\n",
        "\n",
        "        if key < arr[mid1]:\n",
        "            right = mid1 - 1\n",
        "        elif key > arr[mid2]:\n",
        "            left = mid2 + 1\n",
        "        else:\n",
        "            left = mid1 + 1\n",
        "            right = mid2 - 1\n",
        "    return -1\n",
        "arr = eval(input(\"Enter a sorted list of numbers: \"))\n",
        "key = int(input(\"Enter the number to search: \"))\n",
        "print(ternary_search(arr, key))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4RUJ8_niP_wq",
        "outputId": "8476b6e2-74da-4af8-daed-2ed61e1fde92"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a sorted list of numbers: [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27] \n",
            "Enter the number to search: 17\n",
            "7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def ternary_search(arr, key):\n",
        "    left, right = 0, len(arr) - 1\n",
        "    while left <= right:\n",
        "        mid1 = left + (right - left) // 3\n",
        "        mid2 = right - (right - left) // 3\n",
        "\n",
        "        if arr[mid1] == key:\n",
        "            return mid1\n",
        "        if arr[mid2] == key:\n",
        "            return mid2\n",
        "\n",
        "        if key < arr[mid1]:\n",
        "            right = mid1 - 1\n",
        "        elif key > arr[mid2]:\n",
        "            left = mid2 + 1\n",
        "        else:\n",
        "            left = mid1 + 1\n",
        "            right = mid2 - 1\n",
        "    return -1\n",
        "arr = eval(input(\"Enter a sorted list of numbers: \"))\n",
        "key = int(input(\"Enter the number to search: \"))\n",
        "print(ternary_search(arr, key))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QN7eAN2PP_ao",
        "outputId": "c07ea87d-582a-47e6-f5b0-25c55ed177b0"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a sorted list of numbers: 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27\n",
            "Enter the number to search: 1\n",
            "-1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def ternary_search(arr, key):\n",
        "    left, right = 0, len(arr) - 1\n",
        "    while left <= right:\n",
        "        mid1 = left + (right - left) // 3\n",
        "        mid2 = right - (right - left) // 3\n",
        "\n",
        "        if arr[mid1] == key:\n",
        "            return mid1\n",
        "        if arr[mid2] == key:\n",
        "            return mid2\n",
        "\n",
        "        if key < arr[mid1]:\n",
        "            right = mid1 - 1\n",
        "        elif key > arr[mid2]:\n",
        "            left = mid2 + 1\n",
        "        else:\n",
        "            left = mid1 + 1\n",
        "            right = mid2 - 1\n",
        "    return -1\n",
        "arr = eval(input(\"Enter a sorted list of numbers: \"))\n",
        "key = int(input(\"Enter the number to search: \"))\n",
        "print(ternary_search(arr, key))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lMY2bxpCXLaj",
        "outputId": "4f73d298-a3b9-4b9b-e78b-1eee60b5d9f4"
      },
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a sorted list of numbers: 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27\n",
            "Enter the number to search: 3\n",
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def add(*args):\n",
        "  print(type(args))\n",
        "  print(args[1][0])\n",
        "\n",
        "add(2,[4,3],4,5)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2Cl_yZUK1Vx1",
        "outputId": "249c7f9c-f53a-4f13-905d-2fb76a999def"
      },
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'tuple'>\n",
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def info(**kwargs):\n",
        "  for key, value in kwargs.items():\n",
        "    print(key,value)\n",
        "info(name = 'ABC',age = 3, city = 'Delhi')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bESDJkccxZVW",
        "outputId": "bee386c7-5e0b-47a1-b317-6d1b7c63c0e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "name ABC\n",
            "age 3\n",
            "city Delhi\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def show(*args, **kwargs):\n",
        "    print(\"Positional args:\", args)\n",
        "    print(\"Keyword args:\", kwargs)\n",
        "\n",
        "show(1, 2, 3, name='Karthick', city='Chennai')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wRWVicn3YSIg",
        "outputId": "832e877a-9882-4449-db9d-ac56b51cf03a"
      },
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Positional args: (1, 2, 3)\n",
            "Keyword args: {'name': 'Karthick', 'city': 'Chennai'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Recursion\n",
        "\n",
        "def factorial(n):\n",
        "  if n == 0 :\n",
        "    return 1\n",
        "  else:\n",
        "    return n * factorial(n-1)\n",
        "\n",
        "factorial(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DP4UU5mEyIbC",
        "outputId": "f9e80386-6fc3-43a2-9bf9-8cec6602b221"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def greet(n) :\n",
        "  print('Hello ' + n )\n",
        "\n",
        "def process (f, name):\n",
        "  f(name)  ## greet('Rishabh')\n",
        "\n",
        "\n",
        "process(greet,\"Rishabh\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5mPfClxwy4m_",
        "outputId": "05ff71b1-36ae-496b-a0e4-18d997443bc8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello Rishabh\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def greet(n):\n",
        "    print('Hello ' + n)\n",
        "def bye(n):\n",
        "    print('Goodbye ' + n)\n",
        "def process(f, name):\n",
        "    f(name)\n",
        "process(bye, \"Rishabh\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ER9KWmlKZMFZ",
        "outputId": "fe9ed999-f9c5-4df2-fb41-5987afc0ce03"
      },
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Goodbye Rishabh\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l = [lambda arg = x: arg  for x in range(10)]\n",
        "\n",
        "for i in l:\n",
        "  print(i())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7g2xOPM72xqU",
        "outputId": "63792c1c-c715-466c-8740-0d3e0d6905ac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "add = lambda a, b: a + b\n",
        "print(add(5, 3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IZMLHcgOaZ5Y",
        "outputId": "ea72d8f3-37b2-462d-c8f4-1b9b2416e72f"
      },
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "is_even = lambda n: n % 2 == 0\n",
        "print(is_even(10))\n",
        "print(is_even(7))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bPmVZuEcaZyo",
        "outputId": "738f505b-fe43-4d32-f9fb-542d5c1c8ce8"
      },
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rev = lambda s: s[::-1]\n",
        "print(rev(\"kar\"))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RAAW37claZnO",
        "outputId": "13120194-5033-45af-8069-ac7b32b80345"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "rak\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "min = lambda a,b : a if a<b else b\n",
        "min(1,2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GiLdO4mg3jyn",
        "outputId": "dfab320c-a1a6-440c-c3c1-e70ed3abceff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# map function using lambda to add 10 to every element of the iterable\n",
        "l = [1,2,3,4,5]\n",
        "list(map(lambda x: x+10, l))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FFKCfvg22xwD",
        "outputId": "b182da61-cba6-4e0b-a38f-f717c1232383"
      },
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[11, 12, 13, 14, 15]"
            ]
          },
          "metadata": {},
          "execution_count": 124
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Write a filter function to filter even numbers in a lambda function\n",
        "l= [1,2,3,4]\n",
        "list(filter(lambda x : x % 2 == 0 , l))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m0qZfWXT45Ko",
        "outputId": "73ce9e57-048a-4cf5-b12b-7eab5cc70c5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[2, 4]"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "marks = [35, 45, 60, 80, 25, 50]\n",
        "print(list(filter(lambda x: x >= 40, marks)))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7QMh-C_Sb0PM",
        "outputId": "078b00eb-5efe-4f58-be17-42c8fe7c9d2a"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[45, 60, 80, 50]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "27th Sep 🇰\n",
        "\n",
        "1. data Structure manipulation problems\n",
        "2. Functional programming\n",
        "3. InBuilt functions\n",
        "4. Higher order functions - map, reduce, filter\n",
        "5. Lambda Functions\n"
      ],
      "metadata": {
        "id": "Ml0JPbTV74_g"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from functools import reduce\n",
        "def decorator(func):\n",
        "    def wrapper(*args, **kwargs):\n",
        "        print(f\"Inputs: {args}\")\n",
        "        result = func(*args, **kwargs)\n",
        "        print(f\"Result: {result}\")\n",
        "        return result\n",
        "    return wrapper\n",
        "@decorator\n",
        "def process_data(data):\n",
        "    mapped = map(lambda x: x * 2, data)\n",
        "    filtered = filter(lambda x: x % 3 == 0, mapped)\n",
        "    reduced = reduce(lambda x, y: x + y, filtered, 10)\n",
        "    return reduced\n",
        "input_data = [1, 2, 3, 4, 5, 6]\n",
        "final_result = process_data(input_data)\n",
        "print(final_result)\n",
        "What will be the output of the code above?\n",
        "A) Inputs: ([1, 2, 3, 4, 5, 6],), Result: 48, 48\n",
        "B) Inputs: ([1, 2, 3, 4, 5, 6],), Result: 28, 28\n",
        "C) Inputs: ([1, 2, 3, 4, 5, 6],), Result: 34, 34\n",
        "D) Inputs: ([1, 2, 3, 4, 5, 6],), Result: 22, 22"
      ],
      "metadata": {
        "id": "rlhgfGUd7-eV",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "outputId": "0db2ba0d-515e-462e-f3d9-749872448dd9"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "unmatched ')' (ipython-input-4131307536.py, line 26)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-4131307536.py\"\u001b[0;36m, line \u001b[0;32m26\u001b[0m\n\u001b[0;31m    A) Inputs: ([1, 2, 3, 4, 5, 6],), Result: 48, 48\u001b[0m\n\u001b[0m     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unmatched ')'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from functools import reduce\n",
        "def decorator(func):\n",
        "    def wrapper(*args, **kwargs):\n",
        "        print(f\"Inputs: {args}\")\n",
        "        result = func(*args, **kwargs)\n",
        "        print(f\"Result: {result}\")\n",
        "        return result\n",
        "    return wrapper\n",
        "@decorator\n",
        "def process_data(data):\n",
        "    mapped = map(lambda x: x * 2, data)\n",
        "    filtered = filter(lambda x: x % 3 == 0, mapped)\n",
        "    reduced = reduce(lambda x, y: x + y, filtered, 10)\n",
        "    return reduced\n",
        "input_data = [1, 2, 3, 4, 5, 6]\n",
        "final_result = process_data(input_data)\n",
        "print(final_result)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d65lwBlYcDOa",
        "outputId": "ee9f3242-de7e-4e9d-8666-de023daeaae5"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Inputs: ([1, 2, 3, 4, 5, 6],)\n",
            "Result: 28\n",
            "28\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from functools import reduce\n",
        "def my_decorator(func):\n",
        "    def wrapper(*args, **kwargs):\n",
        "        print(f\"Original data: {args[0]}\")\n",
        "        result = func(*args, **kwargs)\n",
        "        print(f\"Processed result: {result}\")\n",
        "        return result\n",
        "    return wrapper\n",
        "@my_decorator\n",
        "def process_strings(strings):\n",
        "    mapped = map(lambda s: s.lower().replace('a', '@'), strings)\n",
        "    filtered = filter(lambda s: len(s) > 3, mapped)\n",
        "    reduced = reduce(lambda acc, s: acc + s[0], filtered, \"\")\n",
        "    return reduced\n",
        "data = [\"Apple\", \"Banana\", \"Pear\", \"Kiwi\", \"Mango\"]\n",
        "result = process_strings(data)\n",
        "print(result)\n",
        "\n",
        "What will be the output of the code above?\n",
        "A) Original data: ['Apple', 'Banana', 'Pear', 'Kiwi', 'Mango'], Processed result: \"@bpm\", \"@bpm\"\n",
        "B) Original data: ['Apple', 'Banana', 'Pear', 'Kiwi', 'Mango'], Processed result: \"abp\", \"abp\"\n",
        "C) Original data: ['Apple', 'Banana', 'Pear', 'Kiwi', 'Mango'], Processed result: \"pmb\", \"pmb\"\n",
        "D) Original data:['Apple', 'Banana', 'Pear', 'Kiwi', 'Mango'] Processed result: “bpkm” “bpkm”\n"
      ],
      "metadata": {
        "id": "10CkJqKRw2cV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from functools import reduce\n",
        "def my_decorator(func):\n",
        "    def wrapper(*args, **kwargs):\n",
        "        print(f\"Original data: {args[0]}\")\n",
        "        result = func(*args, **kwargs)\n",
        "        print(f\"Processed result: {result}\")\n",
        "        return result\n",
        "    return wrapper\n",
        "@my_decorator\n",
        "def process_strings(strings):\n",
        "    mapped = map(lambda s: s.lower().replace('a', '@'), strings)\n",
        "    filtered = filter(lambda s: len(s) > 3, mapped)\n",
        "    reduced = reduce(lambda acc, s: acc + s[0], filtered, \"\")\n",
        "    return reduced\n",
        "\n",
        "data = [\"Apple\", \"Banana\", \"Pear\", \"Kiwi\", \"Mango\"]\n",
        "result = process_strings(data)\n",
        "print(result)\n"
      ],
      "metadata": {
        "id": "ahNjz5ATTsJ_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bb395ce8-6578-4d14-c732-3276c66ae941"
      },
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original data: ['Apple', 'Banana', 'Pear', 'Kiwi', 'Mango']\n",
            "Processed result: @bpkm\n",
            "@bpkm\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Calculator:\n",
        "    def add(self, *args):  # default arguments\n",
        "        return sum(args)\n",
        "class calc(Calculator):\n",
        "  pass\n",
        "calc = calc()\n",
        "print(calc.add(5))        # 5\n",
        "print(calc.add(5, 10))    # 15\n",
        "print(calc.add(5, 10, 15))# 30\n",
        "print(calc.add(5, 10, 15,20))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F9d0DRYA70Kr",
        "outputId": "560a9be0-3c63-4bb5-c32c-e72e18355e85"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n",
            "15\n",
            "30\n",
            "50\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Calculator:\n",
        "    def add(self, *args):\n",
        "        return sum(args)\n",
        "\n",
        "    def multiply(self, *args):\n",
        "        result = 1\n",
        "        for num in args:\n",
        "            result *= num\n",
        "        return result\n",
        "\n",
        "    def average(self, *args):\n",
        "        return sum(args) / len(args)\n",
        "\n",
        "# Inherited class (no change)\n",
        "class AdvancedCalculator(Calculator):\n",
        "    pass\n",
        "\n",
        "obj = AdvancedCalculator()\n",
        "print(\"Addition:\", obj.add(2, 3, 4))          # 9\n",
        "print(\"Multiplication:\", obj.multiply(2, 3))  # 6\n",
        "print(\"Average:\", obj.average(2, 3, 4))       # 3.0\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9JlX1y3Hgnrg",
        "outputId": "f44f8721-02f3-42c3-d5a9-6982f065e047"
      },
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Addition: 9\n",
            "Multiplication: 6\n",
            "Average: 3.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class dog():\n",
        "  def speak(self):\n",
        "    print('Bark')\n",
        "class cat():\n",
        "  def speak(self):\n",
        "    print('Meow')\n",
        "def make_speak(animal):\n",
        "  animal.speak()\n",
        "d = dog()\n",
        "c = cat()\n",
        "make_speak(d)\n",
        "make_speak(c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EYaGVbmr9uEZ",
        "outputId": "1bd6fee3-94fb-41c9-9c1e-4459084b87b7"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Bark\n",
            "Meow\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Car:\n",
        "    def start(self):\n",
        "        print(\"Car engine started\")\n",
        "class Bike:\n",
        "    def start(self):\n",
        "        print(\"Bike engine started\")\n",
        "def vehicle_start(vehicle):\n",
        "    vehicle.start()\n",
        "\n",
        "c = Car()\n",
        "b = Bike()\n",
        "\n",
        "vehicle_start(c)\n",
        "vehicle_start(b)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4vkYNfcog48w",
        "outputId": "ce928ead-99d4-45ee-b13a-0c655cd3a6e5"
      },
      "execution_count": 133,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Car engine started\n",
            "Bike engine started\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Name manging\n",
        "\n",
        "class testing:\n",
        " def __init__(self):\n",
        "  self.__a = \"Hidden value\"\n",
        "o = testing()\n",
        "print(o._testing__a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b-2eV5k_TtB9",
        "outputId": "b8aff89b-c75d-466d-b357-af7758b6fd0e"
      },
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hidden value\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Example:\n",
        "    def __init__(self):\n",
        "        self.public = \"Public\"\n",
        "        self._protected = \"Protected\"\n",
        "        self.__private = \"Private\"\n",
        "\n",
        "obj = Example()\n",
        "print(obj.public)\n",
        "print(obj._protected)\n",
        "print(obj._Example__private)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H95V0BPvhmUo",
        "outputId": "74ce5881-650e-4b1c-e6cf-adf7bcd3b028"
      },
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Public\n",
            "Protected\n",
            "Private\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#### Oracle connector\n",
        "\n",
        "import cx_Oracle\n",
        "import pandas as pd\n",
        "\n",
        "# Format: username/password@hostname:port/service_name\n",
        "dsn = cx_Oracle.makedsn(\"hostname\", 1521, service_name=\"ORCL\")\n",
        "conn = cx_Oracle.connect(user=\"username\", password=\"password\", dsn=dsn)\n",
        "query = \"SELECT * FROM employees\"\n",
        "df = pd.read_sql(query, con=conn)\n",
        "\n",
        "print(df.head())"
      ],
      "metadata": {
        "id": "irvLevtwkWJQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "outputId": "32880a35-4160-4fec-e272-9686e4c4b120"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'cx_Oracle'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-877401147.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#### Oracle connector\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mcx_Oracle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'cx_Oracle'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "K4GDimBjhwdU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#### API\n",
        "\n",
        "import requests\n",
        "url = 'APU_url'\n",
        "headers = {\"Authorization\": \"Bearer YOUR_TOKEN\"}\n",
        "response = requests.get(url, headers=headers)\n",
        "response = requests.get(url)\n",
        "if response.status_code == 200:\n",
        "  data = response.json()\n",
        "else:\n",
        "  print('ERROR')\n",
        "df = pd.DataFrame(data)\n",
        "from pandas import json_normalize\n",
        "df = json_normalize(data)"
      ],
      "metadata": {
        "id": "mCJEhacpkWNF",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "outputId": "8956292f-403f-4c6a-ce8c-d6926aaa3647"
      },
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "error",
          "ename": "MissingSchema",
          "evalue": "Invalid URL 'APU_url': No scheme supplied. Perhaps you meant https://APU_url?",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mMissingSchema\u001b[0m                             Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1512354210.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0murl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'APU_url'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mheaders\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"Authorization\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m\"Bearer YOUR_TOKEN\"\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequests\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheaders\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mheaders\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequests\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatus_code\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m200\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/requests/api.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(url, params, **kwargs)\u001b[0m\n\u001b[1;32m     71\u001b[0m     \"\"\"\n\u001b[1;32m     72\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 73\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"get\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/requests/api.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(method, url, **kwargs)\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;31m# cases, and look like a memory leak in others.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0msessions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSession\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\u001b[0m\n\u001b[1;32m    573\u001b[0m             \u001b[0mhooks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mhooks\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    574\u001b[0m         )\n\u001b[0;32m--> 575\u001b[0;31m         \u001b[0mprep\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    576\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    577\u001b[0m         \u001b[0mproxies\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mproxies\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36mprepare_request\u001b[0;34m(self, request)\u001b[0m\n\u001b[1;32m    482\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    483\u001b[0m         \u001b[0mp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPreparedRequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 484\u001b[0;31m         p.prepare(\n\u001b[0m\u001b[1;32m    485\u001b[0m             \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    486\u001b[0m             \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/requests/models.py\u001b[0m in \u001b[0;36mprepare\u001b[0;34m(self, method, url, headers, files, data, params, auth, cookies, hooks, json)\u001b[0m\n\u001b[1;32m    365\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    366\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 367\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_url\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    368\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_headers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mheaders\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    369\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_cookies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcookies\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/requests/models.py\u001b[0m in \u001b[0;36mprepare_url\u001b[0;34m(self, url, params)\u001b[0m\n\u001b[1;32m    436\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    437\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mscheme\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 438\u001b[0;31m             raise MissingSchema(\n\u001b[0m\u001b[1;32m    439\u001b[0m                 \u001b[0;34mf\"Invalid URL {url!r}: No scheme supplied. \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    440\u001b[0m                 \u001b[0;34mf\"Perhaps you meant https://{url}?\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mMissingSchema\u001b[0m: Invalid URL 'APU_url': No scheme supplied. Perhaps you meant https://APU_url?"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GUiNdknpkWP8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8hv1LdyUkWTL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "boEfPBlqkWV2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "SJgwqYDnkWae"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "9pW_xTKskWd6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "wtB_iVJBkWgx"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}